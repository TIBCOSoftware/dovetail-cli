package {{.NS}}

import net.corda.core.identity.AbstractParty
import java.util.Currency
import net.corda.core.serialization.CordaSerializable
import com.fasterxml.jackson.annotation.JsonIgnore
import net.corda.core.contracts.*
{{if eq .IsSchedulable true}}
import net.corda.core.DeleteForDJVM
import net.corda.core.flows.FlowLogicRefFactory
{{end}}
import com.tibco.dovetail.container.corda.*

{{$input := .}}
{{define "override"}}{{if eq .Name "linearId"}}override val{{else}}var{{end}}{{end}}
{{define "parentClass"}}{{if eq .CordaClass ""}}ContractState{{else if eq .CordaClass "net.corda.core.contracts.LinearState"}}LinearState{{end}}{{if eq .IsSchedulable true}},SchedulableState{{end}}{{end}}
@CordaSerializable
@BelongsToContract({{.ContractClass}}::class)
{{if eq .CordaClass ""}}
class {{.Class}}({{range $i, $attr := .Attributes}}{{if ne $i 0}}{{","}}{{end}} var {{$attr.Name}}: {{ $attr| GetKotlinType}}{{if eq $attr.IsOptional true}}?{{end}}{{end}}):{{template "parentClass" $input}}{
{{else if eq .CordaClass "net.corda.core.contracts.LinearState"}}
class {{.Class}}({{range $i, $attr := .Attributes}}{{if ne $i 0}}{{","}}{{end}}{{template "override" $attr}} {{$attr.Name}}: {{ $attr| GetKotlinType}}{{if eq $attr.IsOptional true}}?{{end}} {{end}}) : {{template "parentClass" $input}} {
{{end}}   
    override val participants : List<AbstractParty>
        @JsonIgnore
        get(){ 
            val participants = ArrayList<AbstractParty>()
            {{ $ | GetParticipants}}
            return participants
        }
    {{if eq .IsSchedulable true}}
    @DeleteForDJVM 
    override fun nextScheduledActivity(thisStateRef: StateRef, flowLogicRefFactory: FlowLogicRefFactory): ScheduledActivity? {
        val trig = {{.ContractClass}}Impl.getTrigger("{{.ScheduledActivity}}")
        if(trig == null){
            System.out.println("flow {{.ScheduledActivity}} is not found, nothing scheduled")
            return null
        }
        else {
            var ctnr = CordaContainer(java.util.Arrays.asList(this as ContractState),  "{{.Class}}_nextScheduledActivity")
            ctnr.addContainerProperty("FlowLogicRefFactory", flowLogicRefFactory)
            ctnr.addContainerProperty("StateRef", thisStateRef)
            ctnr.addContainerProperty("Namespace", "{{.NS}}")
            
            var command = CordaCommandDataWithData()
            command.putData("transactionInput", this)
            command.putData("command", "{{.ScheduledActivity}}")

            val txnSvc = CordaTransactionService(null, command)
                             
            val reply = trig.invoke(ctnr, txnSvc)
            if(reply == null || reply.getObjectData() == null){
                System.out.println("flow {{.ScheduledActivity}} doesn't have scheduled event, nothing scheduled")
                return null
            } else {
                System.out.println("flow {{.ScheduledActivity}} scheduled an event")
                return reply.getObjectData() as? ScheduledActivity
            }
        }

    }
    {{end}}
    override fun toString() : String{
         var json:String = "{"
         {{range $attr := .Attributes}}
         {{if eq $attr.IsOptional false}}
         json = json + {{ $attr | ToKotlinString }} + ","
         {{else}}
         if({{$attr.Name}} != null{{if $attr.IsArray}} && {{$attr.Name}}!!.isNotEmpty(){{end}}){
            json = json + {{ $attr | ToKotlinString }} + ","
          }
         {{end}}{{end}}
         json = json.dropLast(1)
         json = json + "}"
         return json
    }

    override fun equals(other: Any?): Boolean  {
         if(other is {{.Class}}) {
            val to = other as ({{.Class}})
            var isEqual: Boolean = true
        {{range $i, $attr := .Attributes}}
            {{if eq .IsOptional true}}
            if({{$attr.Name}} == null && to.{{$attr.Name}} == null)
                isEqual = true
            else if(({{$attr.Name}} == null && to.{{$attr.Name}} != null) || ({{$attr.Name}} != null && to.{{$attr.Name}} == null))
                return false
            else {
                {{if eq $attr.IsArray true}}
                if(!{{$attr.Name}}!!.containsAll(to.{{.Name}} as Collection<{{ $attr | GetKotlinTypeNoArray}}>))
                    return false
                {{else}}
                if (!{{$attr.Name}}!!.equals(to.{{.Name}}))
                    return false
                {{end}}
                else 
                    isEqual = true
            }
            {{else}}
                {{if eq $attr.IsArray true}}
                if(!{{$attr.Name}}!!.containsAll(to.{{$attr.Name}} as Collection<{{ $attr | GetKotlinTypeNoArray}}>))
                    return false
                {{else}}
                if (!{{$attr.Name}}!!.equals(to.{{.Name}}))
                    return false
                {{end}}
                else 
                    isEqual = true
            {{end}}
        {{end}}
            return isEqual
        } else {
            return false
        }
    }
}
