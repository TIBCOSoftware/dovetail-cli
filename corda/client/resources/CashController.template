package {{.NS}}.client.webserver.controller

import {{.NS}}.client.webserver.NodeRPCConnection
import net.corda.core.contracts.Amount
import net.corda.core.identity.CordaX500Name
import net.corda.core.messaging.startTrackedFlow
import net.corda.core.utilities.OpaqueBytes
import net.corda.core.utilities.getOrThrow
import net.corda.finance.workflows.getCashBalance
import net.corda.finance.workflows.getCashBalances
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.*
import net.corda.finance.flows.*
import org.slf4j.LoggerFactory
import org.springframework.http.MediaType
import java.util.*

/**
 * A CorDapp-agnostic controller that exposes standard endpoints.
 */
@RestController
@RequestMapping("/cash") // The paths for GET and POST requests are relative to this base path.
class CashController(val rpc: NodeRPCConnection) {

    companion object {
        private val logger = LoggerFactory.getLogger(RestController::class.java)
    }


    @GetMapping(value = "/balances", produces = arrayOf(MediaType.APPLICATION_JSON_VALUE))
    fun balances(@RequestHeader("Authorization") bearer: String): Map<Currency, Amount<Currency>>{
        val cnx = AccessControl.getRpcProxy(rpc, bearer)
        return cnx.getCashBalances()
    }

    @GetMapping(value = "/balances/{currency}", produces = arrayOf(MediaType.APPLICATION_JSON_VALUE))
    fun balancesByCurrency(@PathVariable currency: String, @RequestHeader("Authorization") bearer: String): Map<String, Amount<Currency>>{
        val cnx = AccessControl.getRpcProxy(rpc, bearer)
        return mapOf("balance" to cnx.getCashBalance(Currency.getInstance(currency)))
    }

    @PostMapping(value = "/flow/issue", produces = arrayOf(MediaType.APPLICATION_JSON_VALUE))
    fun cashIssue(@RequestBody input: CashIssueInput, @RequestHeader("Authorization") bearer: String): ResponseEntity<Map<String, String>> {

        return try {  val cnx = AccessControl.getRpcProxy(rpc, bearer)

            if(input.notary == null){
                return ResponseEntity.badRequest().body(mapOf("error" to "'notary' must not be null"))
            }

            if(input.amount == null || input.amount.quantity <=0 ){
                return ResponseEntity.badRequest().body(mapOf("error" to "'amount' has incorrect value"))
            }

            if(input.issuerBankPartyRef == null){
                return ResponseEntity.badRequest().body(mapOf("error" to "'issuerBankPartyRef' must not be null"))
            }

            val notary = CordaX500Name.parse(input.notary)
            val notaryParty = cnx.wellKnownPartyFromX500Name(notary) ?: return ResponseEntity.badRequest().body(mapOf("error" to "Party named ${input.notary} cannot be found"))


            val signedTx = cnx.startTrackedFlow(::CashIssueFlow,
                    Amount<Currency>(input.amount.quantity, Currency.getInstance(input.amount.currency)),
                            OpaqueBytes(input.issuerBankPartyRef.toByteArray()),
                                    notaryParty).returnValue.getOrThrow()

            ResponseEntity.status(HttpStatus.OK).body(mapOf("transactionId" to "${signedTx!!.stx.tx.id}"))

        } catch (ex: Throwable) {

            ResponseEntity.badRequest().body(mapOf("error" to ex.message!!))
        }
    }

    @PostMapping(value = "/flow/payment", produces = arrayOf(MediaType.APPLICATION_JSON_VALUE))
    fun cashPayment(@RequestBody input: CashTransferInput, @RequestHeader("Authorization") bearer: String): ResponseEntity<Map<String, String>> {

        return try {
            val cnx = AccessControl.getRpcProxy(rpc, bearer)

            if (input.recipient == null) {
                return ResponseEntity.badRequest().body(mapOf("error" to "'notary' must not be null"))
            }

            if (input.amount == null || input.amount.quantity <= 0) {
                return ResponseEntity.badRequest().body(mapOf("error" to "'amount' has incorrect value"))
            }

            val recipient = CordaX500Name.parse(input.recipient)
            val recipientParty = cnx.wellKnownPartyFromX500Name(recipient)
                    ?: return ResponseEntity.badRequest().body(mapOf("error" to "Party named ${input.recipient} cannot be found"))


            val signedTx = cnx.startTrackedFlow(::CashPaymentFlow,
                    Amount<Currency>(input.amount.quantity, Currency.getInstance(input.amount.currency)),
                    recipientParty,
                    input.anonymous).returnValue.getOrThrow()

            ResponseEntity.status(HttpStatus.OK).body(mapOf("transactionId" to "${signedTx!!.stx.tx.id}"))

        } catch (ex: Throwable) {

            ResponseEntity.badRequest().body(mapOf("error" to ex.message!!))
        }
    }
    @PostMapping(value = "/flow/issue-payment", produces = arrayOf(MediaType.APPLICATION_JSON_VALUE))
    fun cashIssueAndPayment(@RequestBody input: CashIssueTransferInput, @RequestHeader("Authorization") bearer: String): ResponseEntity<Map<String, String>> {

        return try {  val cnx = AccessControl.getRpcProxy(rpc, bearer)

            if(input.recipient == null){
                return ResponseEntity.badRequest().body(mapOf("error" to "'notary' must not be null"))
            }

            if(input.amount == null || input.amount.quantity <=0 ){
                return ResponseEntity.badRequest().body(mapOf("error" to "'amount' has incorrect value"))
            }

            if(input.notary == null){
                return ResponseEntity.badRequest().body(mapOf("error" to "'notary' must not be null"))
            }

            if(input.issuerRef == null){
                return ResponseEntity.badRequest().body(mapOf("error" to "'issueRef' must not be null"))
            }

            val notary = CordaX500Name.parse(input.notary)
            val notaryParty = cnx.wellKnownPartyFromX500Name(notary) ?: return ResponseEntity.badRequest().body(mapOf("error" to "Party named ${input.notary} cannot be found"))

            val recipient = CordaX500Name.parse(input.recipient)
            val recipientParty = cnx.wellKnownPartyFromX500Name(recipient) ?: return ResponseEntity.badRequest().body(mapOf("error" to "Party named ${input.recipient} cannot be found"))


            val signedTx = cnx.startTrackedFlow(::CashIssueAndPaymentFlow,
                    Amount<Currency>(input.amount.quantity, Currency.getInstance(input.amount.currency)),
                    OpaqueBytes(input.issuerRef.toByteArray()),
                    recipientParty,
                    input.anonymous,
                    notaryParty).returnValue.getOrThrow()

            ResponseEntity.status(HttpStatus.OK).body(mapOf("transactionId" to "${signedTx!!.stx.tx.id}"))

        } catch (ex: Throwable) {

            ResponseEntity.badRequest().body(mapOf("error" to ex.message!!))
        }
    }

    @PostMapping(value = "/flow/exit", produces = arrayOf(MediaType.APPLICATION_JSON_VALUE))
    fun cashExit(@RequestBody input: CashExitInput, @RequestHeader("Authorization") bearer: String): ResponseEntity<Map<String, String>> {

        return try {
            val cnx = AccessControl.getRpcProxy(rpc, bearer)

            if(input.issuerRef == null){
                return ResponseEntity.badRequest().body(mapOf("error" to "'issueRef' must not be null"))
            }

            if (input.amount == null || input.amount.quantity <= 0) {
                return ResponseEntity.badRequest().body(mapOf("error" to "'amount' has incorrect value"))
            }

            val signedTx = cnx.startTrackedFlow(::CashExitFlow,
                    Amount<Currency>(input.amount.quantity, Currency.getInstance(input.amount.currency)),
                    OpaqueBytes(input.issuerRef.toByteArray())).returnValue.getOrThrow()

            ResponseEntity.status(HttpStatus.OK).body(mapOf("transactionId" to "${signedTx!!.stx.tx.id}"))

        } catch (ex: Throwable) {

            ResponseEntity.badRequest().body(mapOf("error" to ex.message!!))
        }
    }


    data class CashIssueInput(val amount: MoneyAmount, val issuerBankPartyRef: String, val notary: String)
    data class CashTransferInput(val amount: MoneyAmount, val recipient: String, val anonymous: Boolean = false)
    data class CashIssueTransferInput(val amount: MoneyAmount, val issuerRef: String, val recipient: String, val anonymous: Boolean = false, val notary: String)
    data class CashExitInput(val amount: MoneyAmount, val issuerRef: String)

}