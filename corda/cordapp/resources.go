// Code generated by go-bindata.
// sources:
// resources/app.template
// resources/flow.template
// resources/kotlin.pom.xml
// DO NOT EDIT!

package cordapp

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesAppTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\x31\x6a\xf4\x30\x10\x46\x7b\x9d\x62\x76\xab\xdd\x66\x0e\x60\xf8\xf9\x31\xa9\xd2\xa4\x88\xd3\x85\x14\xb3\xca\x44\xc8\xb1\xa4\x61\x34\x76\x63\x74\xf7\x60\x67\x0d\x81\x34\x51\xa5\x81\xef\xf1\x9e\x90\xff\xa4\xc0\xb0\xae\xf8\x34\xb4\xe6\x5c\x4c\x52\xd4\xc0\x97\x84\x16\x6f\xbe\xe0\x7b\x59\xd8\x28\x4e\xe8\x8b\x32\xea\x9c\x2d\x26\x46\x5f\x92\xc4\x89\xb5\x62\x2f\xf2\x70\x3f\xfe\x0a\x9b\xc6\x10\x58\xf1\xf1\xe5\xfb\xe3\x5c\xb9\x8d\xec\x6d\xab\xe8\x45\x5a\x83\xd5\x39\x00\x80\x85\x26\xf0\x25\x9b\x92\xb7\xfb\xb6\xc2\x3f\xf8\xa1\x3c\x42\x7a\x91\xcb\x41\x77\x9d\x9f\xa8\x56\x1c\x69\x21\x0c\x6c\xcf\x5c\xcb\xac\x9e\xfb\x3a\x98\x32\xa5\xcb\x99\x44\x70\xac\x25\x9f\xaf\xd7\xdd\xf3\x31\x67\x08\x7c\x28\x2e\x99\x12\x77\x30\x98\xc6\x1c\xae\x1d\x1c\x99\xff\x61\xdd\xd7\xdb\x53\xb6\x59\xf3\xaf\xb8\xd3\xe9\x75\x83\xdf\xf6\x5d\x73\xed\x2b\x00\x00\xff\xff\xe9\x8e\x7f\x82\x5f\x01\x00\x00")

func resourcesAppTemplateBytes() ([]byte, error) {
	return bindataRead(
		_resourcesAppTemplate,
		"resources/app.template",
	)
}

func resourcesAppTemplate() (*asset, error) {
	bytes, err := resourcesAppTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/app.template", size: 351, mode: os.FileMode(420), modTime: time.Unix(1553873969, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesFlowTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xd1\x6e\xdb\x3a\x0c\x7d\xf7\x57\x10\x41\x1f\xec\xc2\x10\xee\x73\x70\x73\xd1\xb4\x17\xc3\x06\x6c\x45\xd1\xe4\x07\x58\x9b\x71\xb5\x2a\x92\x40\xd1\xe9\x02\x43\xff\x3e\xc8\x49\x6c\xa7\x6d\x8a\x2d\x0f\x49\x68\x1d\x1e\x92\x87\xc7\xf2\x58\xbd\x60\x43\xd0\x75\xea\x7e\x15\x63\x96\xe9\xad\x77\x2c\x50\x39\xe5\x91\xd1\x18\x32\xad\xd5\x3b\xe2\x40\x6a\xa3\x9f\x88\x83\x5a\xb5\xc1\x93\xad\xf1\xc9\xd0\x09\x6d\x49\x54\xe5\xb8\xc6\xf4\x4d\x6a\x63\xdc\x6b\x50\xd7\x17\x4e\x5b\xd1\x46\x8b\xa6\xa0\x1e\xd8\x35\x4c\x21\xac\x19\xab\x17\xe2\xb1\xf6\x56\x89\x7e\xaa\x9c\xaa\xdd\x8e\x04\xb5\x51\x95\xb3\x82\xda\x12\x1f\x88\xbc\x57\x4b\xef\xbf\x18\xf7\xfa\x57\x39\xff\xd3\x06\x5b\x23\x2b\xdd\xd8\x35\xa3\x0d\x58\x89\x76\x76\x4a\xf3\xa6\xd5\x44\xc1\x58\x49\x50\xcb\xad\x6b\xad\x5c\x80\xe9\x9a\xac\x68\xd9\xab\x07\x64\xd9\x5f\x00\xc9\x58\x31\xa8\xd4\x02\xd5\x93\x26\x4e\x49\x3f\x71\x87\xbd\x42\xea\x3a\xeb\xba\x2b\xf4\x1e\xe6\x0b\x48\xd3\xc6\x98\x1e\x68\xab\x45\xa3\x38\x0e\xfd\xf3\x6f\xa7\x30\x0d\x11\xa0\xc7\x30\xda\x86\xe0\x8a\x29\x78\x67\x6b\xe2\x12\xc6\xac\x3e\xe9\xf1\x74\xd2\x27\x1d\x78\x51\xe4\x40\xa9\x6d\x4d\xbf\x60\x5a\x67\xfc\x1f\x63\x76\x73\xac\xa8\x6d\xd3\xeb\x76\xb3\x12\x64\x49\x5e\xb8\xdd\x3f\x3e\xdc\x65\x95\xc1\x10\x60\xda\x68\x8c\xf9\xd0\x93\x2e\xa1\xaf\x94\x0a\x1d\x4a\xc6\xd8\x75\x7a\x03\x36\x1d\xc2\x3f\x29\x9a\x95\xb3\xf4\x43\xb6\x8e\x71\x87\x06\x8e\xcd\xa9\x7b\xdc\x52\x8c\x73\xe8\xba\x43\xaa\x5a\xef\x3d\xc5\x08\x47\x68\x31\x87\xa3\x25\x72\xe1\x96\x0a\xe8\xb2\x0c\x00\xc0\xed\x88\x59\xd7\x04\x89\xcb\x9f\x1b\x0e\x16\xf0\xc6\x82\x79\x71\xc8\xba\x99\x9a\xfc\x8c\x66\xd3\x5a\xa8\xd0\x98\xbc\x80\x39\xbc\x5b\x23\x74\x3d\x3a\x7d\x76\xc8\x80\xdc\x04\x58\xc0\x77\x6d\x5f\xa8\xfe\x8a\xe1\xf9\x07\xfa\x7f\x57\xc2\xda\x36\x25\x2c\xed\xfe\xbf\xbc\x18\xf0\x9f\x8a\x34\xa0\x12\xa3\xf2\xad\xe4\xb3\x73\x5d\x66\xe5\x1b\xa1\xa6\xc4\xbd\x40\x43\xcc\x6d\x6f\xf9\x9e\x61\xb2\xa5\x23\x43\x32\x9a\x6a\x48\xd6\xac\x9b\x86\xf8\x1d\xaa\x28\xfb\x1e\x46\x7a\x26\x69\xd9\xc2\x80\x49\x9a\x2c\x6d\x7d\xe7\xb6\x5b\x2d\xc7\xf9\x62\x16\xb3\xc1\x3a\x54\xdf\xee\xf3\x73\xd6\xf9\xbc\xf7\x4d\x31\xda\x67\x70\x6f\x8c\x79\xda\x5c\x95\x5e\x3f\x62\x9f\x5e\xb0\x15\x85\xa0\x9d\x9d\x43\x1a\xe3\x18\xa4\x6d\x9c\xf6\xbf\x41\x13\x46\x03\xfc\xc9\x2a\x3f\xdf\xa4\x3c\xeb\xa0\xa6\xaa\x4d\x9a\xfb\x44\xb5\x29\xaa\x28\xc1\xb6\xc6\x14\x13\x77\x18\xd8\x11\xeb\xcd\x3e\xb1\xc2\x02\x2e\xdf\x4d\xf9\x07\xb3\xbf\x93\x9f\xa9\xa2\x74\x4d\x9f\xab\x3f\x56\x28\x3f\x52\x70\x5c\xce\xc9\x23\xbf\x03\x00\x00\xff\xff\x78\x0a\x5d\xd4\x0f\x06\x00\x00")

func resourcesFlowTemplateBytes() ([]byte, error) {
	return bindataRead(
		_resourcesFlowTemplate,
		"resources/flow.template",
	)
}

func resourcesFlowTemplate() (*asset, error) {
	bytes, err := resourcesFlowTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/flow.template", size: 1551, mode: os.FileMode(420), modTime: time.Unix(1553973564, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesKotlinPomXml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4b\x8f\xdb\x36\x10\x3e\x7b\x7f\x05\xbb\xd8\x4b\x81\x88\xb4\x77\x13\x34\x58\xb0\xba\x34\x3d\xa4\x48\xda\x22\x29\x82\x02\x3d\xd1\xd4\x58\x4b\x87\x22\x05\x92\xb2\x5d\x18\xfe\xef\x05\x1f\x7a\x5a\xb6\xfb\x40\x7d\xb1\x38\xf3\xcd\xf0\x1b\x0e\x67\x86\xb4\x36\x7a\x0b\xdc\xa1\x43\x25\x95\xfd\xfe\xfe\xc5\xb9\xfa\x99\x90\x8a\xed\x40\x61\x56\x33\xfe\x02\x58\x9b\x92\xfc\xfa\xcb\x47\xf2\x1a\x2f\xf1\xf2\x3e\x22\x9f\x0f\x56\x74\xe8\xfd\x7e\x8f\xf7\x4f\x01\xf7\xb8\x5c\xae\xc8\xef\x1f\x3f\x7c\xe6\x2f\x50\xb1\x4c\x28\xeb\x98\xe2\x70\x8f\x0e\x56\x3c\xdb\x20\xfc\xa0\x39\x73\x42\xab\xbf\xb1\x19\xba\x84\x38\xd8\x22\x0a\xb3\x80\xc3\x07\x5b\xdc\xe7\x77\x08\xd1\x4a\x17\x20\xbf\x80\xb1\x42\xab\x3c\xe8\x28\x19\xc9\x3c\xa8\x36\xba\x06\xe3\x04\x58\xbf\x44\x88\xae\x99\x85\x77\xc2\xe4\xc4\x41\x55\x53\xd2\x2e\xef\x16\x0b\x5a\x1a\xdd\xd4\xef\x8b\x3c\xfd\x53\xd2\x0a\xee\x10\x5a\x50\x66\x9c\xd8\x30\xee\xde\x17\x79\xff\x49\xc9\x40\x1c\x60\xbb\xb4\x79\xfa\xa7\x64\xd7\xb3\xf1\xa4\x43\x78\x5c\x57\xb5\x90\x60\xb0\x63\xa6\x04\x97\xaf\xf0\x5b\x4a\xe6\x55\xb3\x66\x56\x37\x86\xc3\xac\x59\x52\x45\xb3\xaf\xda\x49\xa1\x70\x4b\x61\x85\x1f\xf1\x77\x2b\x4a\x26\x62\x1f\x7b\x12\x75\x6e\x24\x53\x65\xc3\x4a\xf8\xd2\x9b\x76\x76\x17\x41\x73\x8e\x58\x2d\xae\xfa\x18\xe8\xe7\xcc\xb7\xbb\xea\xb7\xc1\x19\x5d\x56\xdf\x51\x32\xce\x75\x97\xce\x87\x63\xfa\x3a\x8d\x32\x3a\x4c\xe8\xc3\xb1\x5f\x9c\xa6\x39\xed\x52\xfa\x70\x4c\x5f\xa7\x51\x56\x69\x01\x35\xa8\x02\x14\x0f\x3b\x2f\x16\xbd\xe0\xcf\x98\x87\x90\x8b\x76\x6b\x6d\x4a\xbc\x05\xb7\x36\x4c\x28\x8b\x63\x40\x23\x62\x09\x3f\x20\x11\x41\x99\x75\x85\x14\xeb\x6c\x5b\x7c\x7d\x3b\xe5\x98\x6c\x7a\xa6\xe3\x14\x9f\xa6\xd7\x90\x8c\x29\x4e\x29\x0f\x8a\x41\x81\xc3\x5c\x9b\x82\x8d\xcb\x61\x54\x0f\x41\x9f\x71\x6d\xe0\xac\x1e\xfa\x82\xf8\xe3\x35\x5e\xbe\xfa\x76\x44\x64\xf1\xbf\xf0\xd8\x08\xe5\xfb\xd0\x35\x2a\x8f\xbe\x5b\xfc\x07\x32\x5c\x57\xd8\x89\x35\xd7\xb8\xd0\x3b\x70\x4c\xc8\x2b\xac\x5a\x48\x96\xe8\x5f\xa6\xb5\xc4\x2b\xfc\xf4\x0a\xdd\xe0\x35\xbc\x71\x73\xc4\x6a\x26\x75\x25\x94\x96\x6c\x6d\x71\x05\xce\x08\x6e\xaf\xd0\x4b\x88\x4c\xc1\x3e\x33\x20\x05\xbf\xc6\x70\x85\x97\xf8\xcd\xad\x83\x1b\xac\xdb\x5a\x34\x50\x6b\x2b\x9c\x36\x7d\x23\xee\x44\x5d\x91\x50\xab\x58\x6d\x5f\xb4\xb3\x83\x2b\x0d\x8a\xad\x25\x14\xf9\x86\x49\x0b\x94\xb4\xcb\xd6\x84\x9c\xd9\x50\x51\xe4\x1c\x94\x33\x4c\x52\x22\x7a\xa4\x62\x15\xe4\x3f\x44\x05\xfa\xd4\x6d\x4e\x49\x50\xb4\xa8\xc6\xc8\xdc\x4f\x22\xfb\x4c\x88\x67\x88\xcf\xe6\x51\x10\x3c\x52\xe2\x91\xa9\x98\xc6\xa1\x0c\xd6\x6d\xf8\xeb\x46\xc8\x34\x1f\x0a\x61\x80\x07\xe8\xc3\x31\x0d\x9f\x13\x25\xbd\x34\xba\x8c\x5d\xfc\xdd\x0c\x96\x58\xc3\x49\xc5\x84\x22\x6d\xeb\x98\x62\xa3\x07\xdd\xb8\xba\x71\xb3\x1e\xe2\x64\x49\xf6\x84\x4b\x66\x2d\x58\x4a\xa6\x16\x6d\x9a\xa2\xff\xfe\x7c\x5b\xc9\x20\x49\x73\x41\xf5\x44\x3b\x17\x67\x71\xc6\xc3\x1a\x8d\x2c\x32\xd9\x90\xfa\x72\x96\x3f\xfb\x1c\xa5\x36\xf8\x70\x4c\x0f\x19\x3c\x68\xda\x03\x69\xdf\xf3\x7a\xd3\xe8\xaa\x96\x4d\x29\x94\x1d\xad\x2e\x74\xe8\x94\xf0\x98\xfd\x64\x77\xa3\x4b\xc7\x47\xca\x96\x99\x2c\xe2\x6f\xf4\xe8\x47\xfc\x84\x57\x93\xbe\x1c\x00\x5c\xab\x8d\x28\x1b\x13\x5e\x4e\xbd\xfc\x46\x56\x2f\xe4\x2f\x9e\xe9\x8c\x4b\x4a\xda\xf8\x17\x8b\xb3\xa3\xb8\x30\x80\x62\x84\xd7\xa2\xfb\x37\x93\xee\x1f\x4d\xae\xbe\x2f\x1c\x80\x37\x3e\x1c\x3b\x56\x8c\x95\xe7\xba\xae\x45\xc4\x27\xc4\xb0\x45\x4c\x40\xa5\x66\xd2\xe6\xf1\xbf\x87\x87\x15\x8a\xff\x73\x5b\x93\x0b\x7b\x0f\x14\xe1\x91\xe0\x7f\x97\x52\xed\x55\x4a\xef\x99\x51\xb9\x33\x0d\x50\x92\x16\x08\xd1\x6f\xb2\x0c\xbd\x13\xd6\x37\x41\xe4\x65\x42\x95\x16\x65\xd9\xd8\x96\x99\x72\x42\x2d\x0a\xf3\x6c\xcb\x76\x2c\xab\x99\x61\x15\x38\x30\xd6\x27\xb1\xcc\xa3\xd7\x1f\x43\x67\x45\xd6\x4f\x03\x87\xfc\x43\x1a\x6d\xb4\x41\x3f\x7d\xfe\x94\x3d\x2d\xdf\x20\xa6\x94\x76\x81\xe7\xf9\x7e\x24\x6e\xb8\x48\x51\xcd\x5d\x37\x34\xba\x72\xed\x97\x67\x49\x49\xea\x8e\xe1\x01\xe7\x2b\x38\xff\x2b\x00\x00\xff\xff\xae\x2d\x64\x19\xaa\x0c\x00\x00")

func resourcesKotlinPomXmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesKotlinPomXml,
		"resources/kotlin.pom.xml",
	)
}

func resourcesKotlinPomXml() (*asset, error) {
	bytes, err := resourcesKotlinPomXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/kotlin.pom.xml", size: 3242, mode: os.FileMode(420), modTime: time.Unix(1553973432, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/app.template": resourcesAppTemplate,
	"resources/flow.template": resourcesFlowTemplate,
	"resources/kotlin.pom.xml": resourcesKotlinPomXml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"app.template": &bintree{resourcesAppTemplate, map[string]*bintree{}},
		"flow.template": &bintree{resourcesFlowTemplate, map[string]*bintree{}},
		"kotlin.pom.xml": &bintree{resourcesKotlinPomXml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

