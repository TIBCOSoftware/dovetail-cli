package {{.NS}}

import net.corda.core.identity.AbstractParty
import java.util.Currency
import net.corda.core.serialization.CordaSerializable
import net.corda.core.contracts.BelongsToContract
import com.fasterxml.jackson.annotation.JsonIgnore;

{{define "override"}}{{if eq .Name "linearId"}}override val{{else}}var{{end}}{{end}}
{{if eq .CordaClass ""}}
@CordaSerializable
class {{.Class}}({{range $i, $attr := .Attributes}}{{if ne $i 0}}{{","}}{{end}} var {{$attr.Name}}: {{ $attr| GetKotlinType}}{{if eq $attr.IsOptional true}}?{{end}}{{end}}):net.corda.core.contracts.ContractState{
{{else if eq .CordaClass "net.corda.core.contracts.LinearState"}}
@CordaSerializable
@BelongsToContract({{.Class}}Contract::class)
class {{.Class}}({{range $i, $attr := .Attributes}}{{if ne $i 0}}{{","}}{{end}}{{template "override" $attr}} {{$attr.Name}}: {{ $attr| GetKotlinType}}{{if eq $attr.IsOptional true}}?{{end}} {{end}}){{if .CordaClass}} : {{.CordaClass}}{{end}} {
{{end}}   
    override val participants : List<AbstractParty>
        @JsonIgnore
        get(){ 
            val participants = ArrayList<AbstractParty>()
            {{ $ | GetParticipants}}
            return participants
        }

    override fun toString() : String{
         var json:String = "{"
         {{range $attr := .Attributes}}
         {{if eq $attr.IsOptional false}}
         json = json + {{ $attr | ToKotlinString }} + ","
         {{else}}
         if({{$attr.Name}} != null{{if $attr.IsArray}} && {{$attr.Name}}!!.isNotEmpty(){{end}}){
            json = json + {{ $attr | ToKotlinString }} + ","
          }
         {{end}}{{end}}
         json = json.dropLast(1)
         json = json + "}"
         return json
    }

    override fun equals(other: Any?): Boolean  {
         if(other is {{.Class}}) {
            val to = other as ({{.Class}})
            var isEqual: Boolean = true
        {{range $i, $attr := .Attributes}}
            {{if eq .IsOptional true}}
            if({{$attr.Name}} == null && to.{{$attr.Name}} == null)
                isEqual = true
            else if(({{$attr.Name}} == null && to.{{$attr.Name}} != null) || ({{$attr.Name}} != null && to.{{$attr.Name}} == null))
                return false
            else {
                {{if eq $attr.IsArray true}}
                if(!{{$attr.Name}}!!.containsAll(to.{{.Name}} as Collection<{{ $attr | GetKotlinTypeNoArray}}>))
                    return false
                {{else}}
                if (!{{$attr.Name}}!!.equals(to.{{.Name}}))
                    return false
                {{end}}
                else 
                    isEqual = true
            }
            {{else}}
                {{if eq $attr.IsArray true}}
                if(!{{$attr.Name}}!!.containsAll(to.{{$attr.Name}} as Collection<{{ $attr | GetKotlinTypeNoArray}}>))
                    return false
                {{else}}
                if (!{{$attr.Name}}!!.equals(to.{{.Name}}))
                    return false
                {{end}}
                else 
                    isEqual = true
            {{end}}
        {{end}}
            return isEqual
        } else {
            return false
        }
    }
}
