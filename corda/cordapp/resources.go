// Code generated by go-bindata.
// sources:
// resources/app.template
// resources/flow.template
// resources/kotlin.pom.xml
// DO NOT EDIT!

package cordapp

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesAppTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\x31\x6a\xf4\x30\x10\x46\x7b\x9d\x62\x76\xab\xdd\x66\x0e\x60\xf8\xf9\x31\xa9\xd2\xa4\x88\xd3\x85\x14\xb3\xca\x44\xc8\xb1\xa4\x61\x34\x76\x63\x74\xf7\x60\x67\x0d\x81\x34\x51\xa5\x81\xef\xf1\x9e\x90\xff\xa4\xc0\xb0\xae\xf8\x34\xb4\xe6\x5c\x4c\x52\xd4\xc0\x97\x84\x16\x6f\xbe\xe0\x7b\x59\xd8\x28\x4e\xe8\x8b\x32\xea\x9c\x2d\x26\x46\x5f\x92\xc4\x89\xb5\x62\x2f\xf2\x70\x3f\xfe\x0a\x9b\xc6\x10\x58\xf1\xf1\xe5\xfb\xe3\x5c\xb9\x8d\xec\x6d\xab\xe8\x45\x5a\x83\xd5\x39\x00\x80\x85\x26\xf0\x25\x9b\x92\xb7\xfb\xb6\xc2\x3f\xf8\xa1\x3c\x42\x7a\x91\xcb\x41\x77\x9d\x9f\xa8\x56\x1c\x69\x21\x0c\x6c\xcf\x5c\xcb\xac\x9e\xfb\x3a\x98\x32\xa5\xcb\x99\x44\x70\xac\x25\x9f\xaf\xd7\xdd\xf3\x31\x67\x08\x7c\x28\x2e\x99\x12\x77\x30\x98\xc6\x1c\xae\x1d\x1c\x99\xff\x61\xdd\xd7\xdb\x53\xb6\x59\xf3\xaf\xb8\xd3\xe9\x75\x83\xdf\xf6\x5d\x73\xed\x2b\x00\x00\xff\xff\xe9\x8e\x7f\x82\x5f\x01\x00\x00")

func resourcesAppTemplateBytes() ([]byte, error) {
	return bindataRead(
		_resourcesAppTemplate,
		"resources/app.template",
	)
}

func resourcesAppTemplate() (*asset, error) {
	bytes, err := resourcesAppTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/app.template", size: 351, mode: os.FileMode(420), modTime: time.Unix(1554250571, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesFlowTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\xc1\x6e\xeb\x36\x10\xbc\xeb\x2b\x16\x46\x0e\xd2\x83\x40\xf4\x6c\xd4\x45\xfc\x52\x14\x0d\xd0\xa6\x41\xec\x1f\xd8\x48\x2b\x85\x0d\x4d\xb2\x4b\xca\xa9\x21\xf0\xdf\x0b\x4a\xb2\x24\xdb\xb1\xd1\xbc\x1c\x62\x88\x9c\x9d\x1d\x2e\x67\x24\x8b\xc5\x3b\xd6\x04\x6d\x2b\x9e\x36\x21\x24\x89\xdc\x59\xc3\x1e\x0a\x23\x2c\x32\x2a\x45\xaa\xd1\x72\x4f\xec\x48\x54\xf2\x95\xd8\x89\x4d\xe3\x2c\xe9\x12\x5f\x15\x1d\xd1\x9a\xbc\x28\x0c\x97\x18\xff\x93\xa8\x94\xf9\x70\xe2\xdb\x95\xdd\xc6\x4b\x25\xbd\x24\x27\x9e\xd9\xd4\x4c\xce\x6d\x19\x8b\x77\xe2\xa9\xf7\x4e\x78\xf9\x5a\x18\x51\x9a\x3d\x79\x94\x4a\x14\x46\x7b\x94\x9a\xb8\x27\xb2\x56\xac\xad\xfd\x4d\x99\x8f\x2f\xd5\xfc\x4a\x15\x36\xca\x6f\x64\xad\xb7\x8c\xda\x61\xe1\xa5\xd1\x73\x9a\x33\xa9\x91\x82\xb1\xf0\x4e\xac\x77\xa6\xd1\xfe\x0a\x4c\x96\xa4\xbd\xf4\x07\xf1\x8c\xec\x0f\x57\x40\x7e\xea\xe8\x44\x94\x40\xe5\x4c\xc4\xb1\xe8\x6f\xdc\x63\x37\x21\xf1\x2d\x69\xdb\x3b\xb4\x16\x96\x2b\x88\xa7\x0d\x21\x2e\x3c\x18\x5d\xf5\xed\x50\x45\xe1\xae\xdb\xbe\x58\xed\xc0\x8c\xba\x26\xb8\x93\x5a\x7a\x89\xde\x70\x0e\x77\xe8\x3d\xf7\x25\x8f\xc7\xd5\x9e\xa5\x67\x97\x6e\xce\x14\x71\x52\x97\xf4\x2f\x7c\xd2\x76\xa2\x0d\x21\xb9\x1f\xd8\xa4\xae\xbb\x69\xde\x6f\x3c\xb2\x8f\x0e\xf9\x7e\x78\x79\x7e\x48\x0a\x85\xce\x41\x6c\x30\x15\xa5\x93\xc0\x41\x58\xec\xd7\x2b\x0c\xa1\x6d\x65\x05\x3a\x6e\xc2\x4f\xf1\x69\x91\x2f\xe2\x0f\xe9\x32\x84\x3d\xaa\xc8\x15\x91\xe2\x09\x77\x14\xc2\x12\xda\xb6\x2f\x15\xdb\x83\xa5\x10\x60\x80\x66\x4b\x18\x8c\x92\x7a\x6e\x28\xbf\x38\x63\x08\x19\xb4\x49\x02\x00\x60\xf6\xc4\x2c\x4b\x82\xc8\x6f\x4f\xad\x09\x2b\x38\x33\x6b\x9a\xf5\x55\xf7\xf3\x38\x9c\xd0\x54\x8d\x86\x02\x95\x4a\x33\x58\xc2\xc5\x85\x43\xdb\xa1\xe3\xdf\x1e\x19\x90\x6b\x07\x2b\xf8\x43\xea\x77\x2a\x7f\x47\xf7\xf6\x27\xda\x9f\x37\x9e\xa5\xae\x73\x58\xeb\xc3\x2f\x69\x36\xe2\x6f\x0e\x6e\x44\x45\x46\x61\x1b\x9f\x2e\x4e\x67\xb5\xc8\xcf\x86\x37\x27\xee\x86\x06\xe3\x82\x23\xff\x57\xc3\x8f\x83\xbd\x4f\x24\xc8\x0a\xe8\x1f\x38\x77\x4c\x1c\xf2\x4c\x83\xfb\x40\x3b\x54\x4b\x72\xa3\xe5\xd2\xa8\xed\xa2\xed\xf8\xcc\x4d\x97\xc9\x4e\xf8\xcc\x30\x83\xf0\x98\x04\x51\x93\xdf\xb2\xac\x6b\xe2\x0b\x54\x96\xc3\x29\x3d\x93\x6f\x58\xc3\x88\x89\x57\xb1\xd6\xe5\x83\xd9\xed\xa4\x1f\xce\x14\x92\xe8\xff\x5e\xc6\x38\x5e\x26\x67\x8d\x2e\x29\x06\x67\xac\xee\xc2\xf3\x72\xdc\x99\xc2\xf6\xa5\xec\x8c\xcc\xb3\xec\x50\xf9\xfd\x90\x9e\x9e\x65\xb9\xec\x82\x93\x4d\xf9\x99\x15\xa6\xd1\xa6\x45\x7c\x2b\x11\xdb\xf8\xde\xd9\x90\x73\xd2\xe8\x25\xc4\x26\xc3\x43\xb4\xde\x31\x00\x15\x2a\x77\x3b\x01\xff\xc7\xcb\xb7\xad\xfc\x43\xbe\x78\xa1\x82\xe2\x27\x26\xfd\xe4\x34\xd7\x5d\xe2\xdf\xa4\x13\x73\xab\xcc\x66\x73\xc3\x2a\x73\x54\x96\x83\x6e\x94\xca\x66\x49\x54\xb0\x27\x96\xd5\x21\xb2\xc2\x0a\xae\x7f\x31\x6e\x8b\x1d\x3c\xc7\xc3\xc9\x4e\x2d\x37\x75\xc8\x3f\xbb\xc0\x4b\x47\xfe\x17\x00\x00\xff\xff\x1b\xf8\x49\x4c\xa5\x07\x00\x00")

func resourcesFlowTemplateBytes() ([]byte, error) {
	return bindataRead(
		_resourcesFlowTemplate,
		"resources/flow.template",
	)
}

func resourcesFlowTemplate() (*asset, error) {
	bytes, err := resourcesFlowTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/flow.template", size: 1957, mode: os.FileMode(420), modTime: time.Unix(1556904512, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesKotlinPomXml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4b\x6f\x1b\x37\x10\x3e\xcb\xbf\x82\x35\x7c\x29\x90\x25\x25\xdb\x41\x03\x83\xdd\x4b\xdd\x43\x8a\xa4\x2d\x92\x22\x28\xd0\x13\xc5\x1d\xaf\xa9\x70\xc9\x05\xc9\x95\x54\x08\xfa\xef\x05\x1f\xfb\xd4\x4a\xea\x03\xd5\x45\xcb\x99\x6f\x86\xdf\x70\x38\x33\xa4\xb5\xd1\x1b\xe0\x0e\xed\x2b\xa9\xec\xf7\xb7\xaf\xce\xd5\x4f\x84\x54\x6c\x0b\x0a\xb3\x9a\xf1\x57\xc0\xda\x94\xe4\xd7\x5f\x3e\x92\x47\xbc\xc4\xcb\xdb\x88\x7c\xda\x5b\xd1\xa1\x77\xbb\x1d\xde\x3d\x04\xdc\xfd\x72\xb9\x22\xbf\x7f\xfc\xf0\x99\xbf\x42\xc5\x32\xa1\xac\x63\x8a\xc3\x2d\xda\x5b\xf1\x64\x83\xf0\x83\xe6\xcc\x09\xad\xfe\xc6\x66\xe8\x1c\x62\x6f\x8b\x28\xcc\x02\x0e\xef\x6d\x71\x9b\xdf\x20\x44\x2b\x5d\x80\xfc\x02\xc6\x0a\xad\xf2\xa0\xa3\x64\x24\xf3\xa0\xda\xe8\x1a\x8c\x13\x60\xfd\x12\x21\xba\x66\x16\x9e\x85\xc9\x89\x83\xaa\xa6\xa4\x5d\xde\x2c\x16\xb4\x34\xba\xa9\xdf\x17\x79\xfa\xa7\xa4\x15\xdc\x20\xb4\xa0\xcc\x38\xf1\xc2\xb8\x7b\x5f\xe4\xfd\x27\x25\x03\x71\x80\x6d\xd3\xe6\xe9\x9f\x92\x6d\xcf\xc6\x93\x0e\xe1\x71\x5d\xd5\x42\x82\xc1\x8e\x99\x12\x5c\xbe\xc2\xef\x28\x99\x57\xcd\x9a\x59\xdd\x18\x0e\xb3\x66\x49\x15\xcd\xbe\x6a\x27\x85\xc2\x2d\x85\x15\xbe\xc7\xdf\xad\x28\x99\x88\x7d\xec\x49\xd4\xb9\x91\x4c\x95\x0d\x2b\xe1\x4b\x6f\xda\xd9\x9d\x05\xcd\x39\x62\xb5\xb8\xe8\x63\xa0\x9f\x33\xdf\x6c\xab\xdf\x06\x67\x74\x5e\x7d\x43\xc9\x38\xd7\x5d\x3a\xef\x0e\xe9\xeb\x38\xca\xe8\x30\xa1\x77\x87\x7e\x71\x9c\xe6\xb4\x4b\xe9\xdd\x21\x7d\x1d\x47\x59\xa5\x05\xd4\xa0\x0a\x50\x3c\xec\xbc\x58\xf4\x82\x3f\x63\x1e\x42\x2e\xda\xad\xb5\x29\xf1\x06\xdc\xda\x30\xa1\x2c\x8e\x01\x8d\x88\x25\xfc\x80\x44\x04\x65\xd6\x15\x52\xac\xb3\x4d\xf1\xf5\xdd\x94\x63\xb2\xe9\x99\x8e\x53\x7c\x9c\x5e\x43\x32\xa6\x38\xa5\x3c\x28\x06\x05\x0e\x73\x6d\x0a\x36\x2e\x87\x51\x3d\x04\x7d\xc6\xb5\x81\x93\x7a\xe8\x0b\xe2\x8f\x47\xbc\x7c\xf3\xed\x88\xc8\xe2\x7f\xe1\xf1\x22\x94\xef\x43\x97\xa8\xdc\xfb\x6e\xf1\x1f\xc8\x70\x5d\x61\x27\xd6\x5c\xe3\x42\x6f\xc1\x31\x21\x2f\xb0\x6a\x21\x59\xa2\x7f\x9e\xd6\x12\xaf\xf0\xe3\x1b\x74\x85\xd7\xf0\xc6\xcd\x11\xab\x99\xd4\x95\x50\x5a\xb2\xb5\xc5\x15\x38\x23\xb8\xbd\x40\x2f\x21\x32\x05\xbb\xcc\x80\x14\xfc\x12\xc3\x15\x5e\xe2\xb7\xd7\x0e\x6e\xb0\x6e\x6b\xd1\x40\xad\xad\x70\xda\xf4\x8d\xb8\x13\x75\x45\x42\xad\x62\xb5\x7d\xd5\xce\x0e\xae\x34\x28\xb6\x96\x50\xe4\x2f\x4c\x5a\xa0\xa4\x5d\xb6\x26\xe4\xc4\x86\x8a\x22\xe7\xa0\x9c\x61\x92\x12\xd1\x23\x15\xab\x20\xff\x21\x2a\xd0\xa7\x6e\x73\x4a\x82\xa2\x45\x35\x46\xe6\x7e\x12\xd9\x27\x42\x3c\x43\x7c\x32\x8f\x82\xe0\x9e\x12\x8f\x4c\xc5\x34\x0e\x65\xb0\x6e\xc3\x5f\x37\x42\xa6\xf9\x50\x08\x03\x3c\x40\xef\x0e\x69\xf8\x1c\x29\xe9\xa5\xd1\x65\xec\xe2\xcf\x33\x58\x62\x0d\x27\x15\x13\x8a\xb4\xad\x63\x8a\x8d\x1e\x74\xe3\xea\xc6\xcd\x7a\x88\x93\x25\xd9\x13\x2e\x99\xb5\x60\x29\x99\x5a\xb4\x69\x8a\xfe\xfb\xf3\x6d\x25\x83\x24\xcd\x05\xd5\x13\xed\x5c\x9c\xc4\x19\x0f\x6b\x34\xb2\xc8\x64\x43\xea\xcb\x59\xfe\xec\x73\x94\xda\xe0\xdd\x21\x3d\x64\xf0\xa0\x69\x0f\xa4\x7d\xcf\xeb\x4d\xa3\xab\x5a\x36\xa5\x50\x76\xb4\x3a\xd3\xa1\x53\xc2\x63\xf6\x93\xdd\x95\x2e\x1d\x1f\x29\x1b\x66\xb2\x88\xbf\xd2\xa3\xef\xf1\x03\x5e\x4d\xfa\x72\x00\x70\xad\x5e\x44\xd9\x98\xf0\x72\xea\xe5\x57\xb2\x7a\x26\x7f\xf1\x4c\x67\x5c\x52\xd2\xc6\xbf\x58\x9c\x1c\xc5\x99\x01\x14\x23\xbc\x14\xdd\xbf\x99\x74\xff\x68\x72\xf5\x7d\x61\x0f\xbc\xf1\xe1\xd8\xb1\x62\xac\x3c\xd5\x75\x2d\x22\x3e\x21\x86\x2d\x62\x02\x2a\x35\x93\x36\x8f\xff\x3d\x3c\xac\x50\xfc\x9f\xdb\x9a\x9c\xd9\x7b\xa0\x08\x8f\x04\xff\x3b\x97\x6a\xaf\x52\x7a\xc7\x8c\xca\x9d\x69\x80\x92\xb4\x40\x88\x7e\x93\x65\xe8\x59\x58\xdf\x04\x91\x97\x09\x55\x5a\x94\x65\x63\x5b\x66\xca\x09\xb5\x28\xcc\xb3\x0d\xdb\xb2\xac\x66\x86\x55\xe0\xc0\x58\x9f\xc4\x32\x8f\x5e\x7f\x0c\x9d\x15\x59\x3f\x0d\x1c\xf2\x0f\x69\xf4\xa2\x0d\xfa\xe9\xf3\xa7\xec\x61\xf9\x16\x31\xa5\xb4\x0b\x3c\x4f\xf7\x23\x71\xc3\x45\x8a\x6a\xee\xba\xa1\xd1\x95\x6b\xbf\x3c\x4b\x4a\x52\x77\x0c\x0f\x38\x5f\xc1\xf9\x5f\x01\x00\x00\xff\xff\xae\xbb\xf7\x03\xaa\x0c\x00\x00")

func resourcesKotlinPomXmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesKotlinPomXml,
		"resources/kotlin.pom.xml",
	)
}

func resourcesKotlinPomXml() (*asset, error) {
	bytes, err := resourcesKotlinPomXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/kotlin.pom.xml", size: 3242, mode: os.FileMode(420), modTime: time.Unix(1554834498, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/app.template": resourcesAppTemplate,
	"resources/flow.template": resourcesFlowTemplate,
	"resources/kotlin.pom.xml": resourcesKotlinPomXml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"app.template": &bintree{resourcesAppTemplate, map[string]*bintree{}},
		"flow.template": &bintree{resourcesFlowTemplate, map[string]*bintree{}},
		"kotlin.pom.xml": &bintree{resourcesKotlinPomXml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

