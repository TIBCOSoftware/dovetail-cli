// Code generated by go-bindata.
// sources:
// resources/import.template
// resources/shim.template
// resources/shim_support.template
// DO NOT EDIT!

package contract

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesImportTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe2\xca\xcc\x2d\xc8\x2f\x2a\x51\xd0\xe0\xe2\xac\xae\x2e\x4a\xcc\x4b\x4f\x55\x50\xc9\xcb\xd5\x51\x50\x29\x4a\x4d\x53\xb0\xb2\x55\xd0\x73\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x2b\xae\xad\xe5\xe2\x8c\x57\x50\xaa\xae\x06\x49\xd5\xd6\x2a\x81\x34\xa4\xe6\xa5\xd4\xd6\x72\x69\x02\x02\x00\x00\xff\xff\x23\xe1\x09\x64\x52\x00\x00\x00")

func resourcesImportTemplateBytes() ([]byte, error) {
	return bindataRead(
		_resourcesImportTemplate,
		"resources/import.template",
	)
}

func resourcesImportTemplate() (*asset, error) {
	bytes, err := resourcesImportTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/import.template", size: 82, mode: os.FileMode(420), modTime: time.Unix(1540263332, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesShimTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xc1\x6e\xe3\x36\x10\x3d\x8b\x5f\x31\x15\xe0\x42\x2c\x1c\xa9\x67\x17\x3a\xb4\xc6\x6e\x1b\x60\x91\x16\x75\x6e\xdb\x45\x41\x51\x43\x99\x88\x44\x0a\xc3\x91\x93\x20\xf0\xbf\x17\xa4\xe4\x46\xdb\xba\xdb\x60\x6f\x06\x3d\xef\xbd\x79\x6f\x66\x34\x2a\xfd\xa0\x3a\x84\x41\x59\x27\x84\x1d\x46\x4f\x0c\x85\xc8\x72\x33\x70\x2e\xb2\x63\x6f\x20\xef\x2c\x1f\xa7\xa6\xd4\x7e\xa8\xee\x6f\x7f\xda\xff\x7a\xf0\x86\x1f\x15\x61\xd5\xfa\x13\xb2\xb2\xfd\x8d\xf6\x8e\xc9\x36\x55\xd3\x7b\xfd\xa0\x8f\xca\xba\xea\xf8\x3c\x22\xf5\xd8\x76\x48\x37\x46\x35\x64\x75\x2e\xb2\x96\x99\x6c\xd7\x21\xbd\x85\xb4\xf3\x37\xbd\x6d\x2a\x9a\x1c\xdb\x01\xab\x05\x99\x8b\x6c\x8d\x5d\xc9\x54\xb3\x4c\xa5\x3d\x61\x95\x9a\xd0\xbe\xc5\x2a\x1c\xed\xf0\xff\xa0\x91\x3c\xfb\x50\x8d\x18\x15\xa4\x10\xfc\x3c\x22\xbc\xbc\x94\xfb\xfd\x9d\x1a\xf0\x7c\xde\x47\xbe\xbd\x6f\x11\x02\xd3\xa4\x19\x5e\x44\xb6\x8f\xae\x95\xe6\x58\x11\x9f\xad\xeb\x44\x76\xff\xe4\xee\x17\x8f\x00\x7f\xfb\x2d\x0f\x83\x22\xbe\x00\x96\x02\x71\x16\xc2\x4c\x4e\x43\x61\xe0\xbb\x6b\x5a\x12\x6e\x9d\xe5\x22\xf0\xd4\x40\xb4\x51\xee\x2f\xae\x0e\x3c\x35\xb7\x8e\x91\x8c\xd2\x28\x21\xb6\x5d\xfe\x8e\x61\xf4\x2e\x60\x6c\x8d\x90\x27\x72\x33\xe8\x30\x69\x8d\x21\x14\xce\xf6\xf2\x4d\x92\x27\xff\x80\x5f\x23\x7a\xec\x8d\x66\x47\xb0\xab\xe1\xd8\x9b\xf2\x0e\x1f\x7f\x79\x0d\xfa\x7d\xca\x39\x26\xa0\xac\x43\x3a\x20\x9d\xac\x9e\x65\xb6\x90\xaf\x5a\xc9\xa5\xc8\x7a\x9f\x02\x9c\x89\x22\x67\xf9\x33\xf2\x07\xdf\x5d\x50\x52\x64\xc6\x6d\x41\x51\x17\x62\x51\x24\x89\x15\xef\x27\xa7\xd9\x7a\xf7\xa3\x6b\x7f\x53\xa4\x06\x64\xa4\x50\x48\x71\x21\x2c\x6f\x9d\xf1\x85\x19\xb8\x3c\x8c\x64\x1d\x9b\x22\x37\xae\xde\x84\x99\xa9\xde\x84\x3f\x5c\xbe\x85\x0b\xf3\xc7\xef\x3f\xc9\x88\xe5\x27\xf7\x25\x4b\xf7\xa4\x5c\x50\x49\xf7\x73\x53\x91\x63\x66\x43\xa7\x9a\x1e\x0f\xa8\x27\xb2\xfc\x2c\x45\x16\x58\xf1\x14\xb6\xd0\x2a\x56\x5b\x40\x4a\x56\x4d\xf9\xba\x3b\xe5\x32\x85\xc5\xfe\x16\xf8\xc9\xc9\x2f\xd8\x98\x09\xeb\xcd\x69\xe6\x4c\x3f\x90\xa8\xde\x9c\x92\xa5\x7f\xe9\x49\x29\x32\x6b\x92\x72\x5d\x83\xb3\x7d\x9c\x5f\x7c\x89\x15\xeb\xa7\xff\xde\xa4\x2c\x3b\x03\xf6\xf3\xe4\xaf\x97\x7d\xfc\xd4\x3c\x33\x16\x91\xb2\x2c\xe6\xfb\x90\x32\x01\xc5\x1a\xbb\x86\xbe\x23\xf2\xf4\x8f\x09\x29\xdb\x63\x0b\xec\x01\x9f\x50\x4f\x8c\xc0\xaf\x89\xef\x20\x4e\x0f\x23\x6a\xb7\x78\x4d\x81\xcf\x0e\xcf\x71\xdd\x4f\x8a\xc0\xf4\xfe\x51\x6b\xa8\xaf\x5e\xf4\xcb\xfa\x8e\x77\x9f\xef\xe2\x39\xc1\x97\x75\xac\xe7\x1e\xef\xf0\xf1\x43\x7a\x28\xd6\xa5\x7f\xc6\x53\x7d\xe7\x3a\xeb\x30\x97\xcb\x91\xc5\x8f\x6a\x21\xa3\xc9\x25\xeb\xdd\x42\x71\x60\x45\x5c\x7c\x3b\xb7\x25\x7f\x48\xff\x7d\xf3\x1a\xfa\x32\xe6\x2b\x61\xa4\xa7\x38\x4e\x62\xeb\x3a\x48\x1e\x20\xde\x26\x6c\x42\xcc\x22\xfa\x4f\xa4\xe5\xda\xd4\x3a\x90\xbf\x02\x00\x00\xff\xff\xc3\x4e\x4b\x71\xf1\x05\x00\x00")

func resourcesShimTemplateBytes() ([]byte, error) {
	return bindataRead(
		_resourcesShimTemplate,
		"resources/shim.template",
	)
}

func resourcesShimTemplate() (*asset, error) {
	bytes, err := resourcesShimTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/shim.template", size: 1521, mode: os.FileMode(420), modTime: time.Unix(1541002502, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesShim_supportTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x51\x4f\xe4\x36\x10\x7e\x8e\x7f\xc5\x34\x42\xc8\xe1\xf6\x1c\xf5\xb5\xd2\x3e\xd0\x85\x9e\xa8\x74\x1c\x02\xfa\x84\x50\x65\x92\x49\x70\x2f\xb1\x23\xc7\x0b\xac\xa2\xfc\xf7\xca\xb1\x9d\x64\x77\x81\xdb\x6b\x4f\xf7\x14\xc5\x99\xf9\xfc\xcd\x37\x9f\x27\x6e\x78\xf6\x95\x97\x08\x35\x17\x92\x10\x51\x37\x4a\x1b\xa0\x24\x8a\x1f\x36\x06\xdb\x98\x44\x31\xca\x4c\xe5\x42\x96\xe9\x3f\xad\x92\x76\xa1\xa8\x8d\x7d\xa8\x36\x26\x24\x8a\x4b\x61\x1e\xd7\x0f\x2c\x53\x75\x7a\x7b\xf1\xfb\xea\xcb\x8d\x2a\xcc\x33\xd7\x98\x16\x95\x2a\xd5\xc7\x4a\x3c\xa4\x99\xd2\x98\x1a\x2d\xca\x12\x75\x7c\x58\x0a\x6f\x9a\xc3\x23\x53\x8d\xad\x5a\xeb\x0c\x0f\x4c\x19\xf8\xf0\xcc\x88\x27\x61\x36\x31\x89\x72\xf3\xb7\x5e\x4b\x23\x6a\x84\xb7\xd3\x73\xf5\x84\x86\x8b\xea\xa3\x07\xf1\x19\x2e\xdd\x17\xf7\xfd\xe9\x33\x59\xba\x4e\x73\x59\x22\x1c\x19\xb1\x80\x23\xa3\xb1\x80\xdf\x96\xc0\x6e\x5d\xc0\x35\x16\x6d\xdf\x0f\x9b\x75\xdd\xf0\x95\x5d\xf2\x1a\xfb\x1e\xe2\xf0\x7e\x8d\x45\xdf\x0f\x40\x28\x73\x1b\x3b\x22\x72\x8b\xc8\x03\xe2\xa9\xaf\x7c\x1b\x92\xef\x40\xf2\xd7\x20\x13\x42\x9e\xb8\x06\x94\xfc\xa1\xc2\x1b\xcc\xd6\x5a\x98\x0d\x2c\xa1\xeb\xd8\xf9\xb0\x76\xfb\x22\xc3\x72\xdf\x93\x62\x2d\x33\x10\x52\x18\x9a\x40\x47\xa2\xa2\x36\xec\x4a\x0b\x69\x2a\x49\x63\xbb\x1c\x27\x24\xb2\x78\x59\x03\x4b\x38\xaf\x1f\x30\xcf\x31\xbf\xd2\xea\x49\xe4\xa8\x69\x42\x48\xc4\x9b\x66\xa5\x64\x21\xca\x05\xa0\xd6\x96\x7e\xd6\xb0\x4f\x68\x4e\x9b\x86\x26\x24\x12\xc5\xb0\xfc\xcb\x12\xa4\xa8\xec\x16\x5b\x7b\xa0\xd6\xec\x5c\x6b\xa5\x69\x92\x90\x28\x52\x2d\x3b\x7f\x11\x86\xfe\x9a\x90\xa8\x27\x24\xb2\x99\x4b\xd0\x58\x8a\xd6\xa0\xf6\xaa\x08\x6c\xe9\xb8\x29\xbb\xf6\xc6\x6a\x7f\xec\x5e\xbe\xa7\xed\xff\x2e\xa1\x52\x16\x87\x5d\xc8\x42\xd1\x78\xa5\x91\x1b\x84\x33\xef\xb4\x73\x59\x0a\x89\x8c\x31\xab\x32\x8e\xfa\x4d\x66\x67\x97\xf8\xec\x82\xa6\x8a\x7f\x28\xa1\x0b\x29\xcc\x0e\x1d\x08\x7c\x06\x3d\x90\x5d\x0c\xe6\xf8\x09\x9b\xc2\x99\x92\x18\x5b\x4b\x15\x95\x7a\xce\x32\x76\xfb\x22\x7d\x1b\x06\x22\x9f\xd0\xf8\x57\x9a\x30\x3a\x1d\x69\x76\x53\x73\x6d\x56\x4a\x1a\xcd\xb3\x10\x92\x90\x9e\x38\x73\xef\x77\xd4\xd6\xa1\xb4\x2d\x61\x8b\xd6\x4e\xa0\x97\x61\x76\x46\xed\x11\x7d\xe3\xcc\x6b\x6c\x1b\x6e\x1e\xed\xa7\xf8\x09\x65\xae\x74\xda\x75\x47\xe3\xf9\x0c\x33\x84\xf9\x01\x6d\x1f\xc3\xf4\x1e\x7b\x7e\xda\xb6\x68\xa8\x87\x79\x55\x6d\x8d\x66\xad\xa5\x5d\x75\x92\xd6\x68\x78\xce\x0d\xb7\xd9\x01\xfe\xb3\x5f\xeb\xfa\xd0\xbf\x10\xc5\xfe\x92\x35\xd7\xed\x23\xaf\xfe\xbc\xf9\x72\x49\x47\x02\x07\x6d\x15\xe0\xaf\xbd\x42\x7f\xf0\xcc\x28\xbd\xa1\xf1\xbc\xc6\x78\x01\x6e\x4c\x4d\x53\xca\xda\x37\xc4\x1e\x07\x26\xd6\x1f\xe3\xfc\xfb\x66\x0b\x82\x29\x02\x27\x29\xaa\xbd\xce\xce\xe6\x82\x76\x67\xa4\x85\xbb\xfb\x93\xf0\xcb\x61\xfe\xdc\x7c\xa3\xed\x13\x8a\xeb\x3c\x89\xf8\xb8\x62\x35\xae\xf9\x57\xa4\x35\x6f\xee\x5a\xa3\x85\x2c\xef\xdd\x23\x21\x51\x9a\x1a\xac\x9b\x8a\x1b\x7c\xc3\x2b\xbb\xd3\x7c\xc2\xbd\x8b\xb7\xf4\x8a\xef\x61\x09\xdb\xa2\x4e\x5a\xd9\xbc\xa0\xe1\x68\x9b\x4a\xf1\x3c\x34\x9d\x4e\xb8\x07\x75\xf5\xbf\xf2\xde\x8c\x3e\xa0\xaf\x35\x3c\x64\xd1\x89\xee\x5e\x99\x73\x0f\x1c\xd2\x8e\xf7\x5c\xb0\x25\x81\xc6\xa2\x85\xfd\x26\xc1\xbc\x71\x27\x63\x1d\x9f\xe7\x72\x2a\x9d\xec\x79\x63\x8e\xed\xe7\x41\xe6\x0d\xf6\x8a\x23\xf6\x81\x13\x12\x15\x4a\x83\xac\x17\xe0\x45\x75\x32\x0f\x34\x5d\x4f\xf6\xe6\x46\x0c\x1f\x86\xe0\x0f\x10\x8f\x37\xa0\x30\x37\x0e\x18\x1c\xaf\x34\x7e\xa6\xda\xc2\xb5\x7f\xe8\xff\x30\x41\x2c\xc4\xf1\x1e\x6f\x3b\x3f\x66\x03\xe4\x9d\xe1\xf1\x1d\xdb\x79\xe5\xee\x64\x7d\xef\x71\xad\x0f\xdf\x15\x7c\xb7\xef\x1e\x62\x11\x0c\x90\xa6\x80\xfe\x4e\xe2\x0e\x79\xb8\x99\x80\xa8\x9b\x0a\x6b\x94\x86\x1b\xa1\x24\xa8\x02\xb6\x03\x88\xd9\x34\x38\x26\x8f\x69\xad\xd1\xeb\xcc\x40\xe7\xc0\x77\xef\x3b\xe0\x68\xb4\xc0\x25\xf0\xa6\xf1\x74\xa0\xd0\xaa\x06\x0e\x99\xaa\x1b\x51\x61\x0e\x56\x1f\x28\x44\x85\xce\xa0\xfb\xb7\x26\x9b\xcc\x76\x08\x77\x63\x91\xc7\xbb\xac\xba\xde\xd7\xea\x6e\x55\x23\x0b\xf3\x88\x33\x1a\x6b\x3d\x94\xea\xf6\xa4\x39\x9c\xec\xc2\x24\x10\x6e\x65\x40\x4f\x26\x06\x33\xf3\xbb\xcb\x5c\x51\x3a\x53\x8c\x11\x5d\xef\xff\xc9\xb6\xb0\x1d\xe3\xc5\x5d\xc7\x56\x2b\x7f\xfa\x07\x97\xbe\x37\x7b\x26\x4b\xf4\xee\x27\x78\xc5\x75\x8b\x03\x9c\x7d\xb3\xe3\xe3\x0c\x33\x65\x45\x1a\x0c\x66\x17\xae\x91\xdb\xf7\xb0\x7f\x32\x5e\x4d\xa6\x7c\xe6\x92\xe8\xb1\xa3\x7f\x28\x83\x51\x71\x97\x16\x5c\xf5\x6f\x00\x00\x00\xff\xff\x39\x9f\xa5\x74\x70\x0d\x00\x00")

func resourcesShim_supportTemplateBytes() ([]byte, error) {
	return bindataRead(
		_resourcesShim_supportTemplate,
		"resources/shim_support.template",
	)
}

func resourcesShim_supportTemplate() (*asset, error) {
	bytes, err := resourcesShim_supportTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/shim_support.template", size: 3440, mode: os.FileMode(420), modTime: time.Unix(1540919363, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/import.template": resourcesImportTemplate,
	"resources/shim.template": resourcesShimTemplate,
	"resources/shim_support.template": resourcesShim_supportTemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"import.template": &bintree{resourcesImportTemplate, map[string]*bintree{}},
		"shim.template": &bintree{resourcesShimTemplate, map[string]*bintree{}},
		"shim_support.template": &bintree{resourcesShim_supportTemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

