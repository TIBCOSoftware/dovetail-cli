package {{.NS}}

import co.paralleluniverse.fibers.Suspendable
import net.corda.core.flows.*
import net.corda.core.utilities.ProgressTracker
import com.tibco.dovetail.container.cordapp.AppFlow
import com.tibco.dovetail.container.cordapp.DefaultSignTransactionFlow
import net.corda.core.contracts.Amount
import net.corda.core.identity.Party
import net.corda.core.transactions.SignedTransaction
import java.util.*
{{$app := .App}}
{{$ConfidentialFlows := .ConfidentialFlows}}
{{range $initiator, $attrs := .InitiatorFlows }}
{{$isConfidential := index $ConfidentialFlows $initiator}}
@InitiatingFlow
@StartableByRPC
class {{$initiator}}({{range $i, $attr := $attrs}}{{if ne $i 0}}{{","}}{{end}}val {{$attr.Name}}: {{ $attr.Type}} {{end}}): AppFlow(true,{{$isConfidential}}) {

    override val progressTracker = ProgressTracker()

    @Suspendable
    override fun call() : SignedTransaction {
        var args = LinkedHashMap<String, Any>()
        {{range $i, $attr := $attrs}}
        args.put("{{$attr.Name}}", {{$attr.Name}})
        {{end}} 
        setOurIdentity()
        {{if eq $isConfidential true}}
        swapIdentitiesInitiator(args)
        {{end}}
        runFlow("{{$initiator}}", {{$app}}.getTrigger("{{$initiator}}"), args)
        return initiatorSignAndCommit()
    }
}
{{end}}
{{range $responder, $initiator := .ResponderFlows}}
{{$isConfidential := index $ConfidentialFlows $responder}}
@InitiatedBy({{$initiator}}::class)
class {{$responder}}(val counterpartySession: FlowSession) : AppFlow(false,{{$isConfidential}}) {

    @Suspendable
    override fun call(): SignedTransaction {
        {{if eq $isConfidential true}}
        swapIdentitiesReceiver(counterpartySession)
        {{end}}
        this.runFlow("{{$responder}}", {{$app}}.getTrigger("{{$responder}}"), null)
        val verifyFlow = DefaultSignTransactionFlow(counterpartySession)
        return receiverSignAndCommit(verifyFlow, counterpartySession)
    }
}
{{end}}
