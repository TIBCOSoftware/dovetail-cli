// Code generated by go-bindata.
// sources:
// resources/abstractflow.template
// resources/app.template
// resources/defaultschedulable.template
// resources/flow.template
// resources/kotlin.pom.xml
// resources/schedulable.template
// DO NOT EDIT!

package cordapp

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesAbstractflowTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\xc1\x8a\xdb\x40\x0c\x86\xef\x7e\x8a\x39\xe4\xb0\xbb\x2c\x7a\x80\x85\x42\x97\x96\x42\x2f\x65\x21\x79\x01\x79\x2c\x1b\x35\x13\xcd\xa0\x91\x93\x06\x33\xef\x5e\xc6\x4e\x70\x68\x9a\xc3\x5e\x7c\x90\x7e\x7d\xff\xef\x7f\x12\xfa\x3d\x0e\xe4\xa6\x09\x7e\x6d\x4b\x69\x1a\x3e\xa4\xa8\xe6\x7c\x84\x84\x8a\x21\x50\x18\x85\x8f\xa4\x99\xa0\xe7\x96\x34\xc3\x76\xcc\x89\xa4\xc3\x36\xd0\x55\x2d\x64\xe0\xa3\x76\x58\xbf\x04\x7d\x88\xa7\x0c\x2f\x0f\xb6\xa3\x71\x60\x63\xca\xf0\xa1\x71\x50\xca\x79\xa7\xe8\xf7\xa4\xab\xf7\x01\x8c\x5b\x1f\xa1\x8b\x47\x32\xe4\x00\x3e\x8a\x21\x0b\xe9\x02\x4a\x09\xde\x53\xfa\x11\xe2\xe9\x53\x37\x4b\xae\xef\xd4\xe3\x18\x6c\xcb\x83\xec\x14\x25\xa3\x37\x8e\x72\x0b\xfb\x27\x70\x05\x29\x7a\xcb\xf0\x7e\x88\xa3\xd8\x03\x19\x77\x24\xc6\x76\x86\x0f\x54\x3b\x3f\x10\xd9\xea\x98\xa1\x46\xa0\xee\x26\xc4\xf5\xe8\x37\x1e\x71\xee\x09\x5e\x9a\x69\xda\x60\x4a\xee\xed\x8b\xab\xff\x5c\x4a\x1d\x7c\x8b\xd2\x2f\x76\x18\x6a\xf0\x3c\xaf\xef\xa6\xb3\x58\x51\x06\x72\x1b\x16\x36\x46\x8b\xfa\xea\x36\xbe\x0a\x87\xf9\xe6\xe7\x75\xbc\x60\x16\x3c\xe7\x5b\x54\xd5\xb1\x74\xf4\xc7\xfd\xc7\x77\xe5\x96\xd2\x7c\xbd\xd0\x58\x86\xb9\x4e\x6c\xf3\x5c\x9c\xf3\x01\x73\x76\x95\xbc\xaa\x9f\x9e\xdf\xdc\xe5\x11\x9f\x4c\x47\x7a\xbd\x33\x2e\xe5\xd9\x4d\x4d\x4d\x44\xd2\x95\xd2\xfc\x0d\x00\x00\xff\xff\xe5\xfa\xbb\x89\xac\x02\x00\x00")

func resourcesAbstractflowTemplateBytes() ([]byte, error) {
	return bindataRead(
		_resourcesAbstractflowTemplate,
		"resources/abstractflow.template",
	)
}

func resourcesAbstractflowTemplate() (*asset, error) {
	bytes, err := resourcesAbstractflowTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/abstractflow.template", size: 684, mode: os.FileMode(420), modTime: time.Unix(1565926679, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesAppTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8e\xb1\x4e\xc3\x40\x0c\x86\xf7\x7b\x0a\xb7\x53\xb2\xf8\x01\x22\x21\x14\x31\x75\x61\xa0\x6c\x88\xc1\x3d\xcc\xe9\x4a\xee\xce\xf2\x39\x5d\xa2\x7b\x77\x94\xd0\x8a\x8e\x08\x4f\xb6\xf4\x7f\xfe\x3f\x21\xff\x45\x81\x61\x59\xf0\xf9\xd8\x9a\x73\x31\x49\x51\x03\x5f\x12\x5a\x3c\xf9\x82\x1f\xe5\xc2\x46\x71\x42\x5f\x94\x51\xe7\x6c\x31\x31\xfa\x92\x24\x4e\xac\x15\x47\x91\xa7\xeb\xf1\x2f\xf8\xaf\x90\x69\x0c\x81\x15\x0f\xaf\x3f\x8b\x73\xe5\x74\x66\x6f\xab\xfa\x28\xd2\xda\x21\xc9\x04\x8b\x73\x00\x00\x17\x9a\x80\x44\xe0\x01\xee\xf4\x6e\xbd\xa3\x48\x77\x0f\x0d\x83\x9f\xa8\x56\x3c\xd3\x85\x30\xb0\xbd\x70\x2d\xb3\x7a\x1e\xeb\xd1\x94\x29\x75\x7b\x12\xc1\x73\x2d\x79\xdf\xf7\xdb\xfb\xcf\x39\x43\x60\xbb\x9a\x74\x99\x12\x0f\x70\x34\x8d\x39\xf4\x03\xdc\x0c\x1f\x61\xd9\xd2\xeb\x28\xdb\xac\x79\x75\xc2\x5f\xb0\x76\xfd\x6e\xf7\xb6\xd2\xef\x5b\xb0\xb9\xf6\x1d\x00\x00\xff\xff\x0e\x56\xb0\x28\x90\x01\x00\x00")

func resourcesAppTemplateBytes() ([]byte, error) {
	return bindataRead(
		_resourcesAppTemplate,
		"resources/app.template",
	)
}

func resourcesAppTemplate() (*asset, error) {
	bytes, err := resourcesAppTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/app.template", size: 400, mode: os.FileMode(420), modTime: time.Unix(1565926679, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesDefaultschedulableTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x31\x6a\x04\x31\x0c\x45\x7b\x9d\x42\xe5\x4c\x0a\x1f\x60\x09\x61\xab\x40\x20\x6c\x91\x21\x07\xd0\x6a\xe4\x8d\x89\xc6\x36\xb2\x67\xb6\x30\xbe\x7b\x70\x60\x21\x4d\x1a\x81\xf4\x9f\x3e\x0f\x32\xf1\x37\xdd\x04\x5b\x73\x97\xa5\x77\x80\xb0\xe5\x64\x15\x39\xb9\x4c\x46\xaa\xa2\x7b\x0c\x87\x58\x11\xe7\xc3\x55\xac\xb8\x65\x2f\x59\xe2\x4a\x57\x95\x07\x1d\xa5\x3a\x4e\xb6\xd2\x98\xe2\xbc\xa6\x7b\x71\x4f\xff\xa4\x9c\x62\x35\xe2\x5a\xdc\x52\xa9\xca\x87\x78\x80\xf3\xc2\x5f\xb2\xee\x3a\x4a\x5f\x35\xdd\x81\x95\x4a\x19\x56\x63\xbb\xd0\x26\xbd\xbf\x6d\x59\xa7\x83\x14\x4d\xfc\x09\x1f\xbf\xf3\x09\x07\xf2\x9e\x6e\x81\x9f\x3f\x63\xa8\x2f\x38\xcd\x0d\x10\x11\xcf\x7f\x4d\xc7\x21\x1d\x62\x16\x56\x41\xbf\x47\x64\x52\x9d\x66\x6c\xf0\x1b\x75\x80\xfe\x13\x00\x00\xff\xff\x22\xf6\x7d\x5a\x0d\x01\x00\x00")

func resourcesDefaultschedulableTemplateBytes() ([]byte, error) {
	return bindataRead(
		_resourcesDefaultschedulableTemplate,
		"resources/defaultschedulable.template",
	)
}

func resourcesDefaultschedulableTemplate() (*asset, error) {
	bytes, err := resourcesDefaultschedulableTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/defaultschedulable.template", size: 269, mode: os.FileMode(420), modTime: time.Unix(1565926679, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesFlowTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x5d\x6f\xdb\x36\x14\x7d\xf7\xaf\xb8\x30\xf2\x20\x15\x02\xbb\x67\x6f\x19\xea\x66\x28\x1a\x20\x4d\x8c\xd8\xc3\x1e\x0b\x46\xba\x56\xb9\xd0\x94\x76\x49\x39\x31\x0c\xfe\xf7\xe1\xca\xd4\x87\x25\xbb\x8d\xd7\xe5\x21\x81\xa4\xc3\x73\x2f\x2f\xcf\x39\x61\x29\xd3\x67\x99\x23\xec\xf7\xe2\x7e\xe9\xfd\x64\xa2\x36\x65\x41\x0e\xd2\x42\x94\x92\xa4\xd6\xa8\x2b\xa3\xb6\x48\x16\xc5\x5a\x3d\x21\x59\xb1\xac\x6c\x89\x26\x93\x4f\x1a\x1b\xb4\x41\x27\xd2\x82\x32\xc9\xbf\x51\xac\x75\xf1\x62\xc5\xbb\x33\x5f\x2b\xa7\xb4\x72\x0a\xad\x58\x50\x91\x13\x5a\xbb\x22\x99\x3e\x23\x75\xb5\x37\xc2\xa9\xa7\xb4\x10\x59\xb1\x45\x27\x95\x16\x69\x61\x9c\x54\x06\xe9\x40\x54\x96\x62\x5e\x96\x9f\x74\xf1\x72\xd1\x9a\x41\xbd\xa5\xc3\xd2\x5e\x44\x70\xd8\xd8\x1f\xb8\x96\x95\x76\x4b\x95\x9b\x15\x49\x63\x65\xea\x54\x61\xfa\xdd\x0c\x76\xcc\x44\x24\x53\x67\xc5\x7c\x53\x54\xc6\x9d\x81\xa9\x0c\x8d\x53\x6e\x27\x16\x92\xdc\xee\x0c\xc8\x75\x15\xad\xe0\x16\x30\xeb\x35\xd1\x2c\xfa\x5b\x6e\x65\x3d\x68\xf1\x6e\xb2\xdf\x5f\xc9\xb2\x84\xd9\x35\xf0\xd0\xbc\xe7\x17\x37\x85\x59\x1f\xca\x49\xcd\x8d\xdb\xfa\xf3\xe8\x6d\x0d\x26\x69\x72\x84\x2b\x65\x94\x53\xd2\x15\x94\xc0\x55\xca\xc0\xbc\x5e\x73\xdb\xbc\x3e\xd0\x1c\xe8\x95\xed\x53\x31\x4e\x99\x0c\x5f\xe1\x44\xdd\x8e\xd7\xfb\xc9\x87\xa5\x93\xe4\x58\x59\x1f\x77\x8f\x8b\x9b\x49\xaa\xa5\xb5\xc0\x84\x1d\xe8\x76\x53\xea\xa8\xeb\x2a\x81\x2b\xe9\x1c\x71\x8d\xd0\x96\x98\x3b\x47\xd6\xfb\xfd\x5e\xad\xc1\x30\x06\x7e\xe1\xa7\x69\x32\xe5\x3f\x68\x32\xef\xb7\x52\x33\x2d\xaf\x14\xf7\x72\x83\xde\xcf\x60\xbf\x3f\x50\x89\xd5\xae\x44\xef\x21\x40\xe3\xd9\xa0\x81\x28\x86\xfd\x64\x02\x00\x50\x6c\x91\x48\x65\x08\x4c\x57\x1e\x8b\x0b\xae\x21\x48\x54\xe4\xe8\xda\x29\x0d\x24\x18\x8d\x86\xe5\x7d\xc2\xf5\xc2\x56\x3e\x4b\xfb\xf0\x64\x91\xd8\x80\xde\xc7\x87\xb2\x1f\xfa\x0e\x3c\xea\x63\x5d\x19\x48\xa5\xd6\x51\x0c\x33\x18\x89\x03\xf6\x35\x9a\x7f\xb6\x92\x40\x52\x6e\xe1\x1a\xee\x94\x79\xc6\xec\xb3\xb4\xdf\xbe\xc8\xf2\xb7\xa5\x23\x65\xf2\x04\xe6\x66\xf7\x7b\x14\x1f\xe1\x4b\x49\x4e\xa5\xaa\x94\xc6\xf1\xba\x39\x91\xdc\xdd\x29\xeb\xc2\x9a\x3e\xfc\x2d\xc7\xd3\x82\xb9\x0f\x51\x56\x2e\x9a\x1e\x9f\xc8\x34\x19\x1c\x51\x9f\x5f\xad\x01\xff\x09\xe7\x55\xdb\x85\x0f\x0d\xa6\xf7\x85\x93\xb4\x9b\x7a\x0f\x32\xcb\x0e\x0f\xd1\x79\x12\xd4\x16\xe1\x0c\x53\x33\xf6\xc0\xd5\x3c\xfe\x47\xb6\x45\x37\x3b\x26\xec\x8f\x52\xc8\x2c\x1b\x6d\x3d\x0e\xe2\x83\x3e\x3f\xbf\x68\x9f\x2d\xba\x87\x8a\x6e\x43\x64\x44\x27\x66\x33\x30\xa1\xa3\x0a\xbd\xb7\x2f\xb2\x0c\x8b\x14\xda\x56\x96\x11\x1f\x42\x72\xd4\x57\x32\x54\x74\x3c\x6c\xa1\xad\x74\x42\xac\xa1\x5c\xdd\x66\x78\x57\x77\x93\x47\x9d\xb8\x97\x68\xb2\xd5\xab\x59\x15\x0d\xe2\x8b\x34\x95\xd4\x7a\xe7\xfd\xa8\x16\x55\x75\xc0\xd6\x83\xea\x79\x31\x68\x84\x63\x8d\x73\x81\xad\xb6\x22\x95\xe7\x48\x23\x64\x9c\xd4\x4a\xeb\x06\x45\xe8\x2a\x32\xd0\x62\xd8\x2f\x73\x93\xdd\x14\x9b\x8d\x72\xd1\x70\xf3\xf5\x32\x3f\xe1\x78\x3b\x74\xd6\x6a\x9c\xd0\x96\x85\xc9\x90\x83\xb1\x25\xab\xb3\xf1\xb1\xf9\xd2\x85\xe9\x45\xd1\xd8\x32\x73\x34\x86\xb3\xc2\xec\x63\x2d\xe9\xde\xd6\x66\xb3\x3a\x27\xe3\x2e\x2e\x7b\x0b\xeb\xb8\xe4\x7c\x4a\xf9\x3f\x0f\x12\x1f\xf1\x6e\x89\xd6\xaa\xc2\xcc\x80\x0b\x85\x07\x8e\x8c\x90\x58\xd1\x5a\x6a\x8b\xc9\x89\x6c\x8a\x43\x86\xbc\x3d\xf9\xda\x19\xbc\x21\xf9\x2e\xc8\xb7\xef\xc7\xdb\xf7\x3d\xd0\x79\xe8\xc8\x0c\x8f\x98\x22\xdf\x74\xa2\x13\x93\x1a\x9b\xe1\x9c\x31\xdf\xbf\x07\xf7\x4d\x59\xd1\x17\x6c\xef\x38\x7e\x20\xd8\x3e\x32\x4e\xc0\x54\x5a\xf7\x43\x58\xc3\x16\x49\xad\x77\xcc\x0c\xd7\x70\xfe\x22\x72\x7a\x0f\xdc\x58\xf2\x13\x0d\x8d\xbc\x43\x61\x64\xc7\xd6\xe9\x7a\x4c\x4e\xa9\xee\xcc\x2c\x4f\x7a\xab\x08\xc9\x30\xb2\x56\x13\x19\x8d\xb3\x2e\xb2\x47\xc3\xfa\x53\xee\x60\x2d\x5d\x6e\x87\xa6\xef\xa1\x1b\xfe\x37\xe9\x0f\xaa\x8b\xb4\x22\x42\xe3\xf8\xae\x0b\xd7\x70\xea\x06\x2c\x1e\xff\xbc\xff\x3a\x5f\x2c\xbe\x7e\xba\x7b\xf8\xeb\xd7\x96\x68\xa4\xe2\x6e\x6a\x3f\xd0\x4c\x0f\x38\xd2\x70\x10\x4e\x03\x79\x44\xbe\xda\xae\x5e\xcd\x05\xa6\xf3\x93\xe6\x16\x37\xf9\x37\x00\x00\xff\xff\x92\x14\xe1\x51\xbe\x0c\x00\x00")

func resourcesFlowTemplateBytes() ([]byte, error) {
	return bindataRead(
		_resourcesFlowTemplate,
		"resources/flow.template",
	)
}

func resourcesFlowTemplate() (*asset, error) {
	bytes, err := resourcesFlowTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/flow.template", size: 3262, mode: os.FileMode(420), modTime: time.Unix(1565926679, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesKotlinPomXml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\x5d\x6f\x23\x27\x17\xbe\x76\x7e\x05\x6f\x94\x5c\xbc\xab\x0e\xd8\xc9\xae\x9a\x46\x74\xa4\xaa\x5b\xa9\xa9\xf6\x4b\x9b\xd5\xaa\x52\xaf\x30\x73\x3c\xc6\xcb\x00\x02\xc6\xf6\x2a\xca\x7f\xaf\x06\xe6\x7b\x6c\x67\x53\x75\x55\xdf\x0c\x9c\x0f\x78\x0e\x87\x87\x73\x4c\x8d\xd5\x1b\xe0\x1e\xed\x0b\xa9\xdc\xcf\xe7\x6b\xef\xcd\x2d\x21\x05\xdb\x82\xc2\xcc\x30\xbe\x06\xac\x6d\x4e\x3e\xbc\x7f\x4b\x5e\xe2\x39\x9e\x9f\x47\xcb\xdb\xbd\x13\xad\xf5\x6e\xb7\xc3\xbb\xeb\x60\x77\x35\x9f\x2f\xc8\x9f\x6f\xdf\xdc\xf3\x35\x14\x2c\x11\xca\x79\xa6\x38\x9c\xa3\xbd\x13\xb7\x2e\x08\xdf\x68\xce\xbc\xd0\xea\x1b\x36\x43\xc7\x2c\xf6\x2e\x8b\xc2\x24\xd8\xe1\xbd\xcb\xce\xd3\x33\x84\x68\xa1\x33\x90\x9f\xc1\x3a\xa1\x55\x1a\x74\x94\x0c\x64\x95\x91\xb1\xda\x80\xf5\x02\x5c\x35\x45\x88\x2e\x99\x83\xd7\xc2\xa6\xc4\x43\x61\x28\x69\xa6\x67\xb3\x19\xcd\xad\x2e\xcd\x5d\x96\xd6\x5f\x4a\x1a\xc1\x19\x42\x33\xca\xac\x17\x2b\xc6\xfd\x5d\x96\x76\x43\x4a\x7a\xe2\x60\xb6\xad\x37\xaf\xbf\x94\x6c\x3b\x34\x15\xe8\x10\x1e\xd7\x85\x11\x12\x2c\xf6\xcc\xe6\xe0\xd3\x05\xbe\xa1\xe4\xb0\xea\xa0\x9b\xd3\xa5\xe5\x70\xd0\xad\x56\x45\xb7\x2f\xda\x4b\xa1\x70\x03\x61\x81\xaf\xf0\x8f\x0b\x4a\x46\xe2\x2a\xf6\x5a\xd4\x2e\x23\x99\xca\x4b\x96\xc3\xe7\xce\xb5\xf5\x3b\x6a\x74\x68\x21\x66\xc4\xc9\x35\x7a\xfa\x43\xee\x9b\x6d\xf1\xa9\x77\x46\xc7\xd5\x67\x94\x0c\x73\xdd\xa6\xf3\xe2\xa1\x1e\x3d\x0e\x32\xda\x4f\xe8\xc5\x43\x37\x79\x1c\xe7\xb4\x4d\xe9\xc5\x43\x3d\x7a\x1c\x64\x95\x66\x60\x40\x65\xa0\x78\xd8\x79\x36\xeb\x04\x5f\x63\x1e\x42\x2e\x9a\xad\xb5\xcd\xf1\x06\xfc\xd2\x32\xa1\x1c\x8e\x01\x0d\x80\xd5\xf6\x3d\x10\xd1\x28\x71\x3e\x93\x62\x99\x6c\xb2\x2f\x37\x63\x8c\xb5\x4f\x87\x74\x98\xe2\xc7\xf1\x35\x24\x43\x88\x63\xc8\x3d\x32\x28\xf0\x98\x6b\x9b\xb1\x21\x1d\x06\x7c\x08\xfa\x84\x6b\x0b\x13\x3e\x74\x84\x78\x89\x17\x03\x14\xb3\x19\x75\x5c\x1b\x48\x8d\xd5\x5b\x91\x41\x46\x49\x9c\x07\x3c\xdf\x03\xe0\x4a\xa8\xea\x81\x4a\xb8\x56\xde\x32\xee\xdd\x73\xd0\x3e\x03\x11\xd7\x05\xf6\x62\xc9\x35\xce\xf4\x16\x3c\x13\xf2\x04\xb4\xc6\x24\xa9\x63\x38\x8a\x68\x8e\xaf\xf0\x22\xb9\x7f\xf7\xcb\x87\xfb\xdf\xdf\x7f\x3a\x0d\xae\x7f\x29\x0f\xa1\x33\x4c\xea\x42\x28\x2d\xd9\xd2\xe1\x02\xbc\x15\xdc\x9d\xc0\x58\x5b\x24\x0a\x76\x89\x05\x29\xf8\x09\x98\x7f\x2d\xf0\x1c\xbf\xfa\xe1\xff\x4f\x01\xbc\xbc\x84\xbd\x07\xab\x98\xbc\xbc\x3c\x1b\xdc\xc8\x86\xbf\x16\x8c\x76\xc2\x6b\xdb\x3d\xde\xad\xa8\x25\x16\x75\x8a\x19\xb7\xd6\xde\xf5\x68\x00\x8a\x2d\x25\x64\xe9\x8a\x49\x07\x94\x34\xd3\xc6\x85\x4c\x7c\xa8\xc8\x52\x0e\xd5\xad\x90\x94\x88\xce\x52\xb1\x02\xd2\x5f\xa3\x02\x7d\x6c\x37\xa7\x24\x28\x1a\xab\xd2\xca\xb4\xaa\x5e\xee\x96\x90\x0a\x21\x9e\xd4\xb0\x20\xb8\xa2\xa4\xb2\xac\x09\x38\x09\xe5\xfb\x06\x17\x2f\xd7\x38\xb4\x20\xfe\xb6\xc0\xb8\x48\x9a\x9c\x6b\xfb\x35\x32\x0e\xdb\x6b\x0e\xdb\xea\x35\x26\x3d\x1d\x89\x6c\xb3\x20\x81\x39\x70\xff\x61\xd4\xce\x58\xa1\xf2\x69\xd8\x51\x8e\x8c\x2c\x73\xa1\x4e\x87\xdf\xb4\x25\x21\xaf\xd1\x0f\x0b\x4d\xa2\xab\x6b\x82\x24\x27\x82\xec\xcd\x9b\x9b\xbd\x2c\x85\xac\xdb\x85\x4c\x58\x08\xa7\x96\x5e\x3c\xd4\xbd\xc8\x23\x25\x9d\x34\x2e\x19\x8b\xfa\xeb\x03\xb6\xc4\x59\x4e\x0a\x26\x14\x69\x2a\xc9\xd8\x36\xae\xa0\x4b\x6f\x4a\x7f\x70\x85\xd8\x68\xd4\xfe\x84\x4b\xe6\x42\xd6\xc6\x1e\x0d\x03\xe3\xfa\xdd\x39\x37\x92\x5e\xb2\x0e\x05\xd5\x01\x6d\x97\x98\xc4\x19\x0f\x6b\xd0\xc1\x90\xd1\x86\xb4\x7a\xc4\xe5\xbb\x2a\x4d\x75\x55\xbc\x78\xa8\xfb\x5a\xdc\xab\xe1\x3d\x69\x57\x02\x3b\xd7\xb8\x54\x9d\xc4\xc1\xec\x48\xc1\xae\xb9\x1c\x89\x5d\xfb\x3d\x51\xb4\x63\xcf\xba\x61\x36\x89\xf6\x4f\x94\xec\x6b\x1c\xda\xa3\x41\x99\x0e\x06\x5c\xab\x95\xc8\x4b\x1b\x1a\xe9\x4e\xfe\x44\x56\x8f\xe4\x2f\x9e\xe9\x91\x25\x29\xec\x81\x97\x95\xcc\xf5\xf7\xe9\xc4\xa3\xdd\x45\x96\x8a\xc2\x0c\x5e\xcc\xe6\xe8\x34\x93\x2e\x0d\x9f\x74\xc3\x2c\x25\x61\x14\x3f\x6e\x64\x6b\xd6\xcc\x41\x6a\x18\xff\xc2\x72\xa0\x24\x4e\x87\x26\x27\x8e\xe0\x5f\xbd\x11\xfd\x98\x15\xd7\x99\x50\x79\x7a\x77\xff\x3e\xb9\xb9\x79\xf5\x53\xb2\xa8\x5e\x9d\x5a\x38\xb6\x0e\xa4\x11\x2b\x01\x36\x65\x46\x50\xd2\x9b\x23\xfa\xbf\x24\x41\x9f\xd6\xc2\xa1\x9d\x90\x12\x2d\x01\x31\x13\x2a\x5d\x86\x76\xc2\xaf\x91\x5f\x03\xda\x30\x8b\xb8\x05\xe6\x1b\x61\x0b\x0c\x79\x96\xa3\x2d\x93\x25\x20\xb1\x42\xc6\x82\x03\xe5\x93\x64\x8a\x77\xcf\x65\x99\x81\x1b\x2b\x3a\x55\xfa\xe2\x05\x79\x71\x57\x18\x89\x03\x3a\x4a\x1a\xf9\x49\x0f\x66\x0c\xde\xb8\xea\x7f\x4c\x23\x1c\x5b\xc7\xdf\x18\x0f\x69\x01\x8d\x95\x47\xaf\x5f\xf4\x9a\x5c\xb5\x9e\xb0\xa1\x2a\x69\xb8\x3a\x9b\x4d\x68\x8b\x0e\xf7\xce\x91\x8d\xa7\x98\x88\xfe\x41\x93\x8e\x9e\xd3\x74\xf7\x8e\xf7\x10\xcd\xc6\xca\xa9\x0e\xb5\xc5\x3c\xfc\xfb\x99\xf2\xae\x0b\x23\xf0\x2c\x7e\x3b\xf3\x30\x43\x07\x59\x78\xf4\xf4\xa7\x19\x98\x85\xdf\x31\x4e\x56\x2a\xa5\x77\xcc\xaa\xd4\xdb\x12\x28\xa9\x27\x28\xf2\xe0\xb5\x70\x55\xe1\x46\x95\x4c\xa8\xdc\xa1\xfe\x55\x9e\x85\xae\x33\x1f\x41\x8b\xc2\x34\xd9\xb0\x2d\x4b\x0c\xb3\xac\x00\x0f\x36\xf4\xee\x79\xcd\xae\xdf\x42\x37\x80\x5c\xd5\xa5\x7a\x54\xe8\x0c\xd0\x4a\x5b\xf4\xc7\xfd\xc7\xe4\x7a\xfe\x0a\x31\xa5\xb4\x0f\x38\xa7\xfb\x91\xb8\xe1\xac\x8e\xea\xe8\xd3\xd8\x5e\xb9\x66\x54\xa1\xa4\xa4\xae\xe4\xe1\xbf\x67\xf5\xb6\xa4\x7f\x07\x00\x00\xff\xff\x41\x16\x4a\x9b\x65\x11\x00\x00")

func resourcesKotlinPomXmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesKotlinPomXml,
		"resources/kotlin.pom.xml",
	)
}

func resourcesKotlinPomXml() (*asset, error) {
	bytes, err := resourcesKotlinPomXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/kotlin.pom.xml", size: 4453, mode: os.FileMode(420), modTime: time.Unix(1571332352, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesSchedulableTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4d\x8f\xdb\x36\x10\xbd\xeb\x57\xcc\x0a\x3d\x48\x89\x41\xf4\xbc\xa8\xdb\xb8\x8b\x04\x59\x34\xcd\x02\x95\x8b\x1e\x8b\x31\x35\x92\x19\x53\x24\x41\x8e\xbc\x35\x1c\xfd\xf7\x82\x92\x65\x5b\x5e\x6d\x17\xd5\xc1\x86\xa9\x79\x6f\xbe\x1e\x9f\x1d\xca\x1d\xd6\x04\xc7\xa3\xf8\x5a\x74\x5d\x92\xa8\xc6\x59\xcf\x20\xad\x70\xe8\x51\x6b\xd2\xad\x51\x7b\xf2\x81\x44\xa5\x36\xe4\x83\x28\xda\xe0\xc8\x94\xb8\xd1\x34\x46\x1b\x62\x21\xad\x2f\x31\x7e\x92\xa8\xb4\x7d\x0e\xe2\xdd\x85\xab\x11\xac\x36\xd2\x8a\xd2\xee\x89\x51\x69\x21\xad\x61\x54\x86\xfc\x00\x73\x4e\xac\x9c\xfb\xa4\xed\xf3\xff\xc5\x3c\x8c\x87\xaf\x94\x12\x41\x1e\x25\x07\x51\x30\x32\xfd\x41\xd5\x2b\x81\xec\xd1\x04\x94\xac\xac\x09\xa2\x50\xb5\xa1\x72\x7d\x39\x1a\x41\x3b\xcb\x5a\x19\x21\xad\xd6\x74\x8a\xfd\xa2\xcc\x8e\xca\xcf\x18\xb6\xbf\xa3\xbb\x89\xf3\x54\xc5\x38\x51\xb5\x5a\x0b\xe7\x55\x83\xfe\xf0\x60\x4d\x60\xdf\x4a\xb6\x3e\x49\x8e\xc7\x1f\xd0\x39\xb8\x5f\x42\x6c\xa6\xeb\x92\x0f\x85\xdc\x52\xd9\xea\x38\xdd\x7e\x1e\x52\x63\x08\x71\x3d\xf1\xd7\x57\x6c\xa8\xeb\x1e\x1b\xa7\xb3\x3d\x6a\xf0\x54\xdd\xc3\xd8\x57\x7e\x0f\xa7\x19\x66\x15\xea\x40\x0b\xe8\xbf\x72\x38\x26\x09\x00\xc0\x87\xeb\xbd\xc5\x03\xbb\x27\xef\x55\x49\x50\xb5\x06\x24\x6a\x9d\xe5\x70\x0f\x2f\x5a\xff\x05\x8e\x7d\x78\x7c\xb4\xad\x6b\xf2\x42\x99\xca\x66\xe9\xa4\x26\x50\x01\xd8\xab\xf8\x9a\x4a\xd8\x1c\x00\x21\x5c\x3a\x01\xda\x93\xe1\x34\x3f\x13\xb1\x3f\x5c\x58\xe3\x13\x88\x9f\x5a\xff\x58\x92\x61\xc5\x87\x2c\x4f\x26\x6f\x63\xb3\x51\x54\x76\xf3\x0d\x96\x20\x3d\x21\x53\xd1\x6e\xe2\xd1\xd3\xe6\x1b\x49\xce\x3c\x55\xf9\x04\xa2\xaa\x6c\x44\xdc\x2d\xc1\xb4\x5a\xe7\xd3\x8c\xf1\xf1\xc4\xad\x37\x10\xda\xcd\x30\xb7\x01\x30\x25\xea\x80\x74\x20\x78\x09\x9e\x0c\xc3\x58\xde\x2a\x53\x03\x5b\x50\x66\x6f\x77\x94\xe6\xaf\x65\x8b\xb5\x4c\x33\x9c\x7f\x75\x12\x59\x6e\xb3\x8f\xff\x48\x72\x71\xf6\xd0\xaf\xef\x3a\x96\xb7\xde\x3e\x83\xa1\x67\x88\x15\x9f\x03\x33\xba\xa4\x1b\xe8\xba\x61\x82\xce\xab\x3d\xf2\x69\xc7\xf3\x73\xbb\x92\x10\x9c\x35\x74\xbd\xf5\x3d\x7a\x40\x5f\x07\x58\xc2\x44\xec\x3f\x15\xec\x95\xa9\x17\xb0\x32\x87\x9f\xb3\x4b\x01\x31\x56\xb8\x96\xb3\xf4\xea\x52\x3d\x1a\xd7\x72\xba\x80\x40\x7e\xaf\x24\x7d\x6e\x37\x42\x5b\x2c\xfb\xd4\xfd\xf6\x44\x89\x8c\x79\x72\xbd\xf2\x93\xa0\x60\x19\xf5\xff\x68\x14\x2b\x64\x65\xea\x5e\x75\x45\xd7\x89\xe1\xf6\x0c\x17\x42\xd4\xc4\xeb\x21\xfe\x46\x9a\xe9\x94\x54\xb2\x89\x8c\xbe\x35\xfd\xce\x6f\x62\x17\x63\xd2\x45\xdf\xc6\x4d\x3d\x18\x76\x71\x0a\x91\x22\xe6\x3b\x9b\xcf\x2a\x1c\x8c\x5c\xc7\xb7\xd9\xb5\x27\x89\xf5\xaa\xf8\xed\xef\xe2\xcf\x5f\x3f\x7d\x79\xfa\xeb\x42\xa5\xaa\xec\xc4\x34\x08\x13\xbe\x7f\x1f\xa8\x85\x0a\x1f\x1b\x17\xe5\x7f\xa3\xd5\x39\xe5\xcc\xea\x32\x56\x19\x86\x05\xc3\xf2\x44\x5a\x13\x67\x3f\xe6\x80\xe1\x3f\xb6\x37\x7b\xdb\x06\xeb\x59\x42\x3a\x3f\xfd\x14\xde\x8f\xb9\xfa\x1c\xe9\x38\xc6\x34\x87\xf7\x90\xc6\xa5\xa4\xb3\xbc\x27\x2d\x4d\xb0\x2b\x5f\xb7\x0d\x19\x0e\xe9\x5b\x95\x26\xaf\xde\xc1\xa9\x21\x9d\x6f\x62\x9f\x13\x62\xb5\xe7\xa6\xf2\x17\x75\xed\xc6\x66\x1f\xe2\xb7\xa8\xac\x8f\x34\xd9\x05\x21\x06\x4b\x7f\x01\x8c\x3e\x0e\xcb\x13\x7e\xce\xe3\x6f\x01\x38\x76\xda\x0b\xc9\xfa\xbb\xbb\xfe\x9f\xb6\x21\x8e\x7f\xae\x0d\xba\x19\xab\x19\xa7\xd6\xcf\x4a\xb1\x30\xd8\xd0\x8d\x4b\x09\xb6\xeb\x83\xa3\x72\xe5\x3d\xbe\xe5\x9f\x6c\xbd\xe8\x0d\xff\xdd\xb9\x98\x7c\x4e\x6f\x23\x04\xc3\x68\x0b\x57\xea\x3b\xb9\x4c\x97\xfc\x1b\x00\x00\xff\xff\x3e\x3e\xfc\x9b\x43\x08\x00\x00")

func resourcesSchedulableTemplateBytes() ([]byte, error) {
	return bindataRead(
		_resourcesSchedulableTemplate,
		"resources/schedulable.template",
	)
}

func resourcesSchedulableTemplate() (*asset, error) {
	bytes, err := resourcesSchedulableTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/schedulable.template", size: 2115, mode: os.FileMode(420), modTime: time.Unix(1565926679, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/abstractflow.template": resourcesAbstractflowTemplate,
	"resources/app.template": resourcesAppTemplate,
	"resources/defaultschedulable.template": resourcesDefaultschedulableTemplate,
	"resources/flow.template": resourcesFlowTemplate,
	"resources/kotlin.pom.xml": resourcesKotlinPomXml,
	"resources/schedulable.template": resourcesSchedulableTemplate,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"abstractflow.template": &bintree{resourcesAbstractflowTemplate, map[string]*bintree{}},
		"app.template": &bintree{resourcesAppTemplate, map[string]*bintree{}},
		"defaultschedulable.template": &bintree{resourcesDefaultschedulableTemplate, map[string]*bintree{}},
		"flow.template": &bintree{resourcesFlowTemplate, map[string]*bintree{}},
		"kotlin.pom.xml": &bintree{resourcesKotlinPomXml, map[string]*bintree{}},
		"schedulable.template": &bintree{resourcesSchedulableTemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

